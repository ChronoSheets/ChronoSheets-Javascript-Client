/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSOrganisation', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSOrganisation();
      });

      it('should create an instance of CSOrganisation', function() {
        // TODO: update the code to test CSOrganisation
        expect(instance).to.be.a(ChronoSheetsApi.CSOrganisation);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property addressLine01 (base name: "AddressLine01")', function() {
        // TODO: update the code to test the property addressLine01
        expect(instance).to.have.property('addressLine01');
        // expect(instance.addressLine01).to.be(expectedValueLiteral);
      });

      it('should have the property addressLine02 (base name: "AddressLine02")', function() {
        // TODO: update the code to test the property addressLine02
        expect(instance).to.have.property('addressLine02');
        // expect(instance.addressLine02).to.be(expectedValueLiteral);
      });

      it('should have the property suburb (base name: "Suburb")', function() {
        // TODO: update the code to test the property suburb
        expect(instance).to.have.property('suburb');
        // expect(instance.suburb).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "State")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property postcode (base name: "Postcode")', function() {
        // TODO: update the code to test the property postcode
        expect(instance).to.have.property('postcode');
        // expect(instance.postcode).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "Country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "Phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property emailAddress (base name: "EmailAddress")', function() {
        // TODO: update the code to test the property emailAddress
        expect(instance).to.have.property('emailAddress');
        // expect(instance.emailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "Timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionCustomerId (base name: "SubscriptionCustomerId")', function() {
        // TODO: update the code to test the property subscriptionCustomerId
        expect(instance).to.have.property('subscriptionCustomerId');
        // expect(instance.subscriptionCustomerId).to.be(expectedValueLiteral);
      });

      it('should have the property signupToken (base name: "SignupToken")', function() {
        // TODO: update the code to test the property signupToken
        expect(instance).to.have.property('signupToken');
        // expect(instance.signupToken).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "IsActive")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property stripeCouponCode (base name: "StripeCouponCode")', function() {
        // TODO: update the code to test the property stripeCouponCode
        expect(instance).to.have.property('stripeCouponCode');
        // expect(instance.stripeCouponCode).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionSource (base name: "SubscriptionSource")', function() {
        // TODO: update the code to test the property subscriptionSource
        expect(instance).to.have.property('subscriptionSource');
        // expect(instance.subscriptionSource).to.be(expectedValueLiteral);
      });

      it('should have the property signUpSource (base name: "SignUpSource")', function() {
        // TODO: update the code to test the property signUpSource
        expect(instance).to.have.property('signUpSource');
        // expect(instance.signUpSource).to.be(expectedValueLiteral);
      });

      it('should have the property mobileSignUpCode (base name: "MobileSignUpCode")', function() {
        // TODO: update the code to test the property mobileSignUpCode
        expect(instance).to.have.property('mobileSignUpCode');
        // expect(instance.mobileSignUpCode).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionCycleStart (base name: "SubscriptionCycleStart")', function() {
        // TODO: update the code to test the property subscriptionCycleStart
        expect(instance).to.have.property('subscriptionCycleStart');
        // expect(instance.subscriptionCycleStart).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionCycleEnd (base name: "SubscriptionCycleEnd")', function() {
        // TODO: update the code to test the property subscriptionCycleEnd
        expect(instance).to.have.property('subscriptionCycleEnd');
        // expect(instance.subscriptionCycleEnd).to.be(expectedValueLiteral);
      });

      it('should have the property pricingPlans (base name: "PricingPlans")', function() {
        // TODO: update the code to test the property pricingPlans
        expect(instance).to.have.property('pricingPlans');
        // expect(instance.pricingPlans).to.be(expectedValueLiteral);
      });

    });
  });

}));
