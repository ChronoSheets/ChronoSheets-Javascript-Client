/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSTrip', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSTrip();
      });

      it('should create an instance of CSTrip', function() {
        // TODO: update the code to test CSTrip
        expect(instance).to.be.a(ChronoSheetsApi.CSTrip);
      });

      it('should have the property tripId (base name: "TripId")', function() {
        // TODO: update the code to test the property tripId
        expect(instance).to.have.property('tripId');
        // expect(instance.tripId).to.be(expectedValueLiteral);
      });

      it('should have the property timesheetId (base name: "TimesheetId")', function() {
        // TODO: update the code to test the property timesheetId
        expect(instance).to.have.property('timesheetId');
        // expect(instance.timesheetId).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleId (base name: "VehicleId")', function() {
        // TODO: update the code to test the property vehicleId
        expect(instance).to.have.property('vehicleId');
        // expect(instance.vehicleId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "UserId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property orgId (base name: "OrgId")', function() {
        // TODO: update the code to test the property orgId
        expect(instance).to.have.property('orgId');
        // expect(instance.orgId).to.be(expectedValueLiteral);
      });

      it('should have the property mobilePlatform (base name: "MobilePlatform")', function() {
        // TODO: update the code to test the property mobilePlatform
        expect(instance).to.have.property('mobilePlatform');
        // expect(instance.mobilePlatform).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "StartDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "EndDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleName (base name: "VehicleName")', function() {
        // TODO: update the code to test the property vehicleName
        expect(instance).to.have.property('vehicleName');
        // expect(instance.vehicleName).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleMake (base name: "VehicleMake")', function() {
        // TODO: update the code to test the property vehicleMake
        expect(instance).to.have.property('vehicleMake');
        // expect(instance.vehicleMake).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleModel (base name: "VehicleModel")', function() {
        // TODO: update the code to test the property vehicleModel
        expect(instance).to.have.property('vehicleModel');
        // expect(instance.vehicleModel).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleYear (base name: "VehicleYear")', function() {
        // TODO: update the code to test the property vehicleYear
        expect(instance).to.have.property('vehicleYear');
        // expect(instance.vehicleYear).to.be(expectedValueLiteral);
      });

      it('should have the property costPerKilometer (base name: "CostPerKilometer")', function() {
        // TODO: update the code to test the property costPerKilometer
        expect(instance).to.have.property('costPerKilometer');
        // expect(instance.costPerKilometer).to.be(expectedValueLiteral);
      });

      it('should have the property tripTotalCost (base name: "TripTotalCost")', function() {
        // TODO: update the code to test the property tripTotalCost
        expect(instance).to.have.property('tripTotalCost');
        // expect(instance.tripTotalCost).to.be(expectedValueLiteral);
      });

      it('should have the property totalTripDistanceMeters (base name: "TotalTripDistanceMeters")', function() {
        // TODO: update the code to test the property totalTripDistanceMeters
        expect(instance).to.have.property('totalTripDistanceMeters');
        // expect(instance.totalTripDistanceMeters).to.be(expectedValueLiteral);
      });

      it('should have the property startAddress (base name: "StartAddress")', function() {
        // TODO: update the code to test the property startAddress
        expect(instance).to.have.property('startAddress');
        // expect(instance.startAddress).to.be(expectedValueLiteral);
      });

      it('should have the property endAddress (base name: "EndAddress")', function() {
        // TODO: update the code to test the property endAddress
        expect(instance).to.have.property('endAddress');
        // expect(instance.endAddress).to.be(expectedValueLiteral);
      });

      it('should have the property pathCoordinates (base name: "PathCoordinates")', function() {
        // TODO: update the code to test the property pathCoordinates
        expect(instance).to.have.property('pathCoordinates');
        // expect(instance.pathCoordinates).to.be(expectedValueLiteral);
      });

      it('should have the property cacheExpiryDate (base name: "CacheExpiryDate")', function() {
        // TODO: update the code to test the property cacheExpiryDate
        expect(instance).to.have.property('cacheExpiryDate');
        // expect(instance.cacheExpiryDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
