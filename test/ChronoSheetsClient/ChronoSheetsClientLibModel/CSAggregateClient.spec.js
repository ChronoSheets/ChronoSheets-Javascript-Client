/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSAggregateClient', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSAggregateClient();
      });

      it('should create an instance of CSAggregateClient', function() {
        // TODO: update the code to test CSAggregateClient
        expect(instance).to.be.a(ChronoSheetsApi.CSAggregateClient);
      });

      it('should have the property clientProjects (base name: "ClientProjects")', function() {
        // TODO: update the code to test the property clientProjects
        expect(instance).to.have.property('clientProjects');
        // expect(instance.clientProjects).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property organisationId (base name: "OrganisationId")', function() {
        // TODO: update the code to test the property organisationId
        expect(instance).to.have.property('organisationId');
        // expect(instance.organisationId).to.be(expectedValueLiteral);
      });

      it('should have the property clientName (base name: "ClientName")', function() {
        // TODO: update the code to test the property clientName
        expect(instance).to.have.property('clientName');
        // expect(instance.clientName).to.be(expectedValueLiteral);
      });

      it('should have the property clientAddressLine1 (base name: "ClientAddressLine1")', function() {
        // TODO: update the code to test the property clientAddressLine1
        expect(instance).to.have.property('clientAddressLine1');
        // expect(instance.clientAddressLine1).to.be(expectedValueLiteral);
      });

      it('should have the property clientAddressLine2 (base name: "ClientAddressLine2")', function() {
        // TODO: update the code to test the property clientAddressLine2
        expect(instance).to.have.property('clientAddressLine2');
        // expect(instance.clientAddressLine2).to.be(expectedValueLiteral);
      });

      it('should have the property clientSuburb (base name: "ClientSuburb")', function() {
        // TODO: update the code to test the property clientSuburb
        expect(instance).to.have.property('clientSuburb');
        // expect(instance.clientSuburb).to.be(expectedValueLiteral);
      });

      it('should have the property clientState (base name: "ClientState")', function() {
        // TODO: update the code to test the property clientState
        expect(instance).to.have.property('clientState');
        // expect(instance.clientState).to.be(expectedValueLiteral);
      });

      it('should have the property clientPostCode (base name: "ClientPostCode")', function() {
        // TODO: update the code to test the property clientPostCode
        expect(instance).to.have.property('clientPostCode');
        // expect(instance.clientPostCode).to.be(expectedValueLiteral);
      });

      it('should have the property personOfContact (base name: "PersonOfContact")', function() {
        // TODO: update the code to test the property personOfContact
        expect(instance).to.have.property('personOfContact');
        // expect(instance.personOfContact).to.be(expectedValueLiteral);
      });

      it('should have the property clientPhoneNumber (base name: "ClientPhoneNumber")', function() {
        // TODO: update the code to test the property clientPhoneNumber
        expect(instance).to.have.property('clientPhoneNumber');
        // expect(instance.clientPhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property clientMobileNumber (base name: "ClientMobileNumber")', function() {
        // TODO: update the code to test the property clientMobileNumber
        expect(instance).to.have.property('clientMobileNumber');
        // expect(instance.clientMobileNumber).to.be(expectedValueLiteral);
      });

      it('should have the property clientEmailAddress (base name: "ClientEmailAddress")', function() {
        // TODO: update the code to test the property clientEmailAddress
        expect(instance).to.have.property('clientEmailAddress');
        // expect(instance.clientEmailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property clientWebURL (base name: "ClientWebURL")', function() {
        // TODO: update the code to test the property clientWebURL
        expect(instance).to.have.property('clientWebURL');
        // expect(instance.clientWebURL).to.be(expectedValueLiteral);
      });

      it('should have the property projectCount (base name: "ProjectCount")', function() {
        // TODO: update the code to test the property projectCount
        expect(instance).to.have.property('projectCount');
        // expect(instance.projectCount).to.be(expectedValueLiteral);
      });

    });
  });

}));
