/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSCreateTripRequest', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSCreateTripRequest();
      });

      it('should create an instance of CSCreateTripRequest', function() {
        // TODO: update the code to test CSCreateTripRequest
        expect(instance).to.be.a(ChronoSheetsApi.CSCreateTripRequest);
      });

      it('should have the property timesheetId (base name: "TimesheetId")', function() {
        // TODO: update the code to test the property timesheetId
        expect(instance).to.have.property('timesheetId');
        // expect(instance.timesheetId).to.be(expectedValueLiteral);
      });

      it('should have the property vehicleId (base name: "VehicleId")', function() {
        // TODO: update the code to test the property vehicleId
        expect(instance).to.have.property('vehicleId');
        // expect(instance.vehicleId).to.be(expectedValueLiteral);
      });

      it('should have the property pathCoordsStringCsv (base name: "PathCoordsStringCsv")', function() {
        // TODO: update the code to test the property pathCoordsStringCsv
        expect(instance).to.have.property('pathCoordsStringCsv');
        // expect(instance.pathCoordsStringCsv).to.be(expectedValueLiteral);
      });

      it('should have the property distanceMeters (base name: "DistanceMeters")', function() {
        // TODO: update the code to test the property distanceMeters
        expect(instance).to.have.property('distanceMeters');
        // expect(instance.distanceMeters).to.be(expectedValueLiteral);
      });

      it('should have the property mobilePlatform (base name: "MobilePlatform")', function() {
        // TODO: update the code to test the property mobilePlatform
        expect(instance).to.have.property('mobilePlatform');
        // expect(instance.mobilePlatform).to.be(expectedValueLiteral);
      });

    });
  });

}));
