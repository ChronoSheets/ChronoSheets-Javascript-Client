/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSOrgReportTranscript', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSOrgReportTranscript();
      });

      it('should create an instance of CSOrgReportTranscript', function() {
        // TODO: update the code to test CSOrgReportTranscript
        expect(instance).to.be.a(ChronoSheetsApi.CSOrgReportTranscript);
      });

      it('should have the property finishedJob (base name: "FinishedJob")', function() {
        // TODO: update the code to test the property finishedJob
        expect(instance).to.have.property('finishedJob');
        // expect(instance.finishedJob).to.be(expectedValueLiteral);
      });

      it('should have the property completedProcessing (base name: "CompletedProcessing")', function() {
        // TODO: update the code to test the property completedProcessing
        expect(instance).to.have.property('completedProcessing');
        // expect(instance.completedProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property startedProcessing (base name: "StartedProcessing")', function() {
        // TODO: update the code to test the property startedProcessing
        expect(instance).to.have.property('startedProcessing');
        // expect(instance.startedProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionId (base name: "TranscriptionId")', function() {
        // TODO: update the code to test the property transcriptionId
        expect(instance).to.have.property('transcriptionId');
        // expect(instance.transcriptionId).to.be(expectedValueLiteral);
      });

      it('should have the property jobName (base name: "JobName")', function() {
        // TODO: update the code to test the property jobName
        expect(instance).to.have.property('jobName');
        // expect(instance.jobName).to.be(expectedValueLiteral);
      });

      it('should have the property contents (base name: "Contents")', function() {
        // TODO: update the code to test the property contents
        expect(instance).to.have.property('contents');
        // expect(instance.contents).to.be(expectedValueLiteral);
      });

      it('should have the property mediaType (base name: "MediaType")', function() {
        // TODO: update the code to test the property mediaType
        expect(instance).to.have.property('mediaType');
        // expect(instance.mediaType).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionStatus (base name: "TranscriptionStatus")', function() {
        // TODO: update the code to test the property transcriptionStatus
        expect(instance).to.have.property('transcriptionStatus');
        // expect(instance.transcriptionStatus).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "Username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property emailAddress (base name: "EmailAddress")', function() {
        // TODO: update the code to test the property emailAddress
        expect(instance).to.have.property('emailAddress');
        // expect(instance.emailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "FirstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "LastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property timesheetId (base name: "TimesheetId")', function() {
        // TODO: update the code to test the property timesheetId
        expect(instance).to.have.property('timesheetId');
        // expect(instance.timesheetId).to.be(expectedValueLiteral);
      });

      it('should have the property documentS3SignedUrl (base name: "DocumentS3SignedUrl")', function() {
        // TODO: update the code to test the property documentS3SignedUrl
        expect(instance).to.have.property('documentS3SignedUrl');
        // expect(instance.documentS3SignedUrl).to.be(expectedValueLiteral);
      });

      it('should have the property imageLargeS3SignedUrl (base name: "ImageLargeS3SignedUrl")', function() {
        // TODO: update the code to test the property imageLargeS3SignedUrl
        expect(instance).to.have.property('imageLargeS3SignedUrl');
        // expect(instance.imageLargeS3SignedUrl).to.be(expectedValueLiteral);
      });

      it('should have the property imageMediumS3SignedUrl (base name: "ImageMediumS3SignedUrl")', function() {
        // TODO: update the code to test the property imageMediumS3SignedUrl
        expect(instance).to.have.property('imageMediumS3SignedUrl');
        // expect(instance.imageMediumS3SignedUrl).to.be(expectedValueLiteral);
      });

      it('should have the property imageSmallS3SignedUrl (base name: "ImageSmallS3SignedUrl")', function() {
        // TODO: update the code to test the property imageSmallS3SignedUrl
        expect(instance).to.have.property('imageSmallS3SignedUrl');
        // expect(instance.imageSmallS3SignedUrl).to.be(expectedValueLiteral);
      });

      it('should have the property timesheetStart (base name: "TimesheetStart")', function() {
        // TODO: update the code to test the property timesheetStart
        expect(instance).to.have.property('timesheetStart');
        // expect(instance.timesheetStart).to.be(expectedValueLiteral);
      });

      it('should have the property timesheetEnd (base name: "TimesheetEnd")', function() {
        // TODO: update the code to test the property timesheetEnd
        expect(instance).to.have.property('timesheetEnd');
        // expect(instance.timesheetEnd).to.be(expectedValueLiteral);
      });

      it('should have the property fileAttachmentId (base name: "FileAttachmentId")', function() {
        // TODO: update the code to test the property fileAttachmentId
        expect(instance).to.have.property('fileAttachmentId');
        // expect(instance.fileAttachmentId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "UserId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property orgId (base name: "OrgId")', function() {
        // TODO: update the code to test the property orgId
        expect(instance).to.have.property('orgId');
        // expect(instance.orgId).to.be(expectedValueLiteral);
      });

      it('should have the property mobilePlatform (base name: "MobilePlatform")', function() {
        // TODO: update the code to test the property mobilePlatform
        expect(instance).to.have.property('mobilePlatform');
        // expect(instance.mobilePlatform).to.be(expectedValueLiteral);
      });

      it('should have the property attachmentType (base name: "AttachmentType")', function() {
        // TODO: update the code to test the property attachmentType
        expect(instance).to.have.property('attachmentType');
        // expect(instance.attachmentType).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "Notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

      it('should have the property nonImageFilePath (base name: "NonImageFilePath")', function() {
        // TODO: update the code to test the property nonImageFilePath
        expect(instance).to.have.property('nonImageFilePath');
        // expect(instance.nonImageFilePath).to.be(expectedValueLiteral);
      });

      it('should have the property imageLargeFilePath (base name: "ImageLargeFilePath")', function() {
        // TODO: update the code to test the property imageLargeFilePath
        expect(instance).to.have.property('imageLargeFilePath');
        // expect(instance.imageLargeFilePath).to.be(expectedValueLiteral);
      });

      it('should have the property imageMediumFilePath (base name: "ImageMediumFilePath")', function() {
        // TODO: update the code to test the property imageMediumFilePath
        expect(instance).to.have.property('imageMediumFilePath');
        // expect(instance.imageMediumFilePath).to.be(expectedValueLiteral);
      });

      it('should have the property imageSmallFilePath (base name: "ImageSmallFilePath")', function() {
        // TODO: update the code to test the property imageSmallFilePath
        expect(instance).to.have.property('imageSmallFilePath');
        // expect(instance.imageSmallFilePath).to.be(expectedValueLiteral);
      });

      it('should have the property originalFileName (base name: "OriginalFileName")', function() {
        // TODO: update the code to test the property originalFileName
        expect(instance).to.have.property('originalFileName');
        // expect(instance.originalFileName).to.be(expectedValueLiteral);
      });

      it('should have the property latitude (base name: "Latitude")', function() {
        // TODO: update the code to test the property latitude
        expect(instance).to.have.property('latitude');
        // expect(instance.latitude).to.be(expectedValueLiteral);
      });

      it('should have the property longitude (base name: "Longitude")', function() {
        // TODO: update the code to test the property longitude
        expect(instance).to.have.property('longitude');
        // expect(instance.longitude).to.be(expectedValueLiteral);
      });

      it('should have the property dateUploaded (base name: "DateUploaded")', function() {
        // TODO: update the code to test the property dateUploaded
        expect(instance).to.have.property('dateUploaded');
        // expect(instance.dateUploaded).to.be(expectedValueLiteral);
      });

      it('should have the property dateImageCaptured (base name: "DateImageCaptured")', function() {
        // TODO: update the code to test the property dateImageCaptured
        expect(instance).to.have.property('dateImageCaptured');
        // expect(instance.dateImageCaptured).to.be(expectedValueLiteral);
      });

      it('should have the property storageAllocationBytes (base name: "StorageAllocationBytes")', function() {
        // TODO: update the code to test the property storageAllocationBytes
        expect(instance).to.have.property('storageAllocationBytes');
        // expect(instance.storageAllocationBytes).to.be(expectedValueLiteral);
      });

      it('should have the property audioDurationSeconds (base name: "AudioDurationSeconds")', function() {
        // TODO: update the code to test the property audioDurationSeconds
        expect(instance).to.have.property('audioDurationSeconds');
        // expect(instance.audioDurationSeconds).to.be(expectedValueLiteral);
      });

    });
  });

}));
