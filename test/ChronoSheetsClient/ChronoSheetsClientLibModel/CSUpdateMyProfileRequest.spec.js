/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  describe('ChronoSheetsClient', function() {
    describe('CSUpdateMyProfileRequest', function() {
      beforeEach(function() {
        instance = new ChronoSheetsApi.CSUpdateMyProfileRequest();
      });

      it('should create an instance of CSUpdateMyProfileRequest', function() {
        // TODO: update the code to test CSUpdateMyProfileRequest
        expect(instance).to.be.a(ChronoSheetsApi.CSUpdateMyProfileRequest);
      });

      it('should have the property emailAddress (base name: "EmailAddress")', function() {
        // TODO: update the code to test the property emailAddress
        expect(instance).to.have.property('emailAddress');
        // expect(instance.emailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "FirstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "LastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property oldPassword (base name: "OldPassword")', function() {
        // TODO: update the code to test the property oldPassword
        expect(instance).to.have.property('oldPassword');
        // expect(instance.oldPassword).to.be(expectedValueLiteral);
      });

      it('should have the property newPassword (base name: "NewPassword")', function() {
        // TODO: update the code to test the property newPassword
        expect(instance).to.have.property('newPassword');
        // expect(instance.newPassword).to.be(expectedValueLiteral);
      });

      it('should have the property confirmNewPassword (base name: "ConfirmNewPassword")', function() {
        // TODO: update the code to test the property confirmNewPassword
        expect(instance).to.have.property('confirmNewPassword');
        // expect(instance.confirmNewPassword).to.be(expectedValueLiteral);
      });

      it('should have the property isSubscribedToNewsletter (base name: "IsSubscribedToNewsletter")', function() {
        // TODO: update the code to test the property isSubscribedToNewsletter
        expect(instance).to.have.property('isSubscribedToNewsletter');
        // expect(instance.isSubscribedToNewsletter).to.be(expectedValueLiteral);
      });

      it('should have the property wantsToChangePassword (base name: "WantsToChangePassword")', function() {
        // TODO: update the code to test the property wantsToChangePassword
        expect(instance).to.have.property('wantsToChangePassword');
        // expect(instance.wantsToChangePassword).to.be(expectedValueLiteral);
      });

    });
  });

}));
