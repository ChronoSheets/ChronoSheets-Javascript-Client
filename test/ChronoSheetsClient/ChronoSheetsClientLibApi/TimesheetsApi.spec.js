/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChronoSheetsApi.TimesheetsApi();
  });

  describe('ChronoSheetsClient', function() {
    describe('TimesheetsApi', function() {
      describe('timesheetsCreateSingleTimesheet', function() {
        it('should call timesheetsCreateSingleTimesheet successfully', function(done) {
          // TODO: uncomment, update parameter values for timesheetsCreateSingleTimesheet call and complete the assertions
          /*
          var request = new ChronoSheetsApi.CSTimesheet();
          request.timesheetId = 0;
          request.userId = 0;
          request.jobId = 0;
          request.taskId = 0;
          request.startDateTime = new Date();
          request.endDateTime = new Date();
          request.description = "";
          request.tripId = 0;
          request.fileAttachmentCount = 0;
          request.payAmount = 0.0;
          request.overtimePayAmount = 0.0;
          request.includesOvertime = false;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.timesheetsCreateSingleTimesheet(request, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseInt32);
            expect(data.data).to.be.a('number');
            expect(data.data).to.be(0);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timesheetsDeleteTimesheet', function() {
        it('should call timesheetsDeleteTimesheet successfully', function(done) {
          // TODO: uncomment, update parameter values for timesheetsDeleteTimesheet call and complete the assertions
          /*
          var timesheetId = 56;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.timesheetsDeleteTimesheet(timesheetId, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseBoolean);
            expect(data.data).to.be.a('boolean');
            expect(data.data).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timesheetsGetTimesheets', function() {
        it('should call timesheetsGetTimesheets successfully', function(done) {
          // TODO: uncomment, update parameter values for timesheetsGetTimesheets call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.timesheetsGetTimesheets(startDate, endDate, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListTimesheet);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSTimesheet);
                expect(data.timesheetId).to.be.a('number');
                expect(data.timesheetId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.jobId).to.be.a('number');
                expect(data.jobId).to.be(0);
                expect(data.taskId).to.be.a('number');
                expect(data.taskId).to.be(0);
                expect(data.startDateTime).to.be.a(Date);
                expect(data.startDateTime).to.be(new Date());
                expect(data.endDateTime).to.be.a(Date);
                expect(data.endDateTime).to.be(new Date());
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.tripId).to.be.a('number');
                expect(data.tripId).to.be(0);
                expect(data.fileAttachmentCount).to.be.a('number');
                expect(data.fileAttachmentCount).to.be(0);
                expect(data.payAmount).to.be.a('number');
                expect(data.payAmount).to.be(0.0);
                expect(data.overtimePayAmount).to.be.a('number');
                expect(data.overtimePayAmount).to.be(0.0);
                expect(data.includesOvertime).to.be.a('boolean');
                expect(data.includesOvertime).to.be(false);

                      }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timesheetsUpdateTimesheets', function() {
        it('should call timesheetsUpdateTimesheets successfully', function(done) {
          // TODO: uncomment, update parameter values for timesheetsUpdateTimesheets call and complete the assertions
          /*
          var request = new ChronoSheetsApi.CSBatchUpdateTimesheetRequest();
          request.timesheets = [new ChronoSheetsApi.CSTimesheet()];
          request.timesheets[0].timesheetId = 0;
          request.timesheets[0].userId = 0;
          request.timesheets[0].jobId = 0;
          request.timesheets[0].taskId = 0;
          request.timesheets[0].startDateTime = new Date();
          request.timesheets[0].endDateTime = new Date();
          request.timesheets[0].description = "";
          request.timesheets[0].tripId = 0;
          request.timesheets[0].fileAttachmentCount = 0;
          request.timesheets[0].payAmount = 0.0;
          request.timesheets[0].overtimePayAmount = 0.0;
          request.timesheets[0].includesOvertime = false;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.timesheetsUpdateTimesheets(request, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListInt32);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
