/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChronoSheetsApi.ReportsApi();
  });

  describe('ChronoSheetsClient', function() {
    describe('ReportsApi', function() {
      describe('reportsGetAllChartsDataAdmin', function() {
        it('should call reportsGetAllChartsDataAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetAllChartsDataAdmin call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.userIds = "userIds_example";
          opts.forceOnlyThisChart = "forceOnlyThisChart_example";

          instance.reportsGetAllChartsDataAdmin(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseCombinedReportsData);
            expect(data.data).to.be.a(ChronoSheetsApi.CSCombinedReportsData);
                  {
                let dataCtr = data.data.seriesJobCodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSJobSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.jobId).to.be.a('number');
                  expect(data.jobId).to.be(0);
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                  expect(data.jobCode).to.be.a('string');
                  expect(data.jobCode).to.be("");
                }
              }
              {
                let dataCtr = data.data.seriesTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSTaskSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.taskId).to.be.a('number');
                  expect(data.taskId).to.be(0);
                  expect(data.taskName).to.be.a('string');
                  expect(data.taskName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.seriesClients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSClientSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.seriesProjects;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSProjectSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsJobCodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSJobTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.jobId).to.be.a('number');
                  expect(data.jobId).to.be(0);
                  expect(data.jobCode).to.be.a('string');
                  expect(data.jobCode).to.be("");
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSTaskTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.taskId).to.be.a('number');
                  expect(data.taskId).to.be(0);
                  expect(data.taskName).to.be.a('string');
                  expect(data.taskName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsClients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSClientTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsProjects;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSProjectTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetAllChartsDataUser', function() {
        it('should call reportsGetAllChartsDataUser successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetAllChartsDataUser call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.reportsGetAllChartsDataUser(startDate, endDate, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseCombinedReportsData);
            expect(data.data).to.be.a(ChronoSheetsApi.CSCombinedReportsData);
                  {
                let dataCtr = data.data.seriesJobCodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSJobSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.jobId).to.be.a('number');
                  expect(data.jobId).to.be(0);
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                  expect(data.jobCode).to.be.a('string');
                  expect(data.jobCode).to.be("");
                }
              }
              {
                let dataCtr = data.data.seriesTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSTaskSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.taskId).to.be.a('number');
                  expect(data.taskId).to.be(0);
                  expect(data.taskName).to.be.a('string');
                  expect(data.taskName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.seriesClients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSClientSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.seriesProjects;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSProjectSeriesReportItem);
                  expect(data.startDate).to.be.a(Date);
                  expect(data.startDate).to.be(new Date());
                  expect(data.endDate).to.be.a(Date);
                  expect(data.endDate).to.be(new Date());
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsJobCodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSJobTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.jobId).to.be.a('number');
                  expect(data.jobId).to.be(0);
                  expect(data.jobCode).to.be.a('string');
                  expect(data.jobCode).to.be("");
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSTaskTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.taskId).to.be.a('number');
                  expect(data.taskId).to.be(0);
                  expect(data.taskName).to.be.a('string');
                  expect(data.taskName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsClients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSClientTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.clientId).to.be.a('number');
                  expect(data.clientId).to.be(0);
                  expect(data.clientName).to.be.a('string');
                  expect(data.clientName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
              {
                let dataCtr = data.data.totalsProjects;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSProjectTotalsReportItem);
                  expect(data.organisationId).to.be.a('number');
                  expect(data.organisationId).to.be(0);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(0);
                  expect(data.projectId).to.be.a('number');
                  expect(data.projectId).to.be(0);
                  expect(data.projectName).to.be.a('string');
                  expect(data.projectName).to.be("");
                  expect(data.spanSeconds).to.be.a('number');
                  expect(data.spanSeconds).to.be(0);
                }
              }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetFleetSummaryAdmin', function() {
        it('should call reportsGetFleetSummaryAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetFleetSummaryAdmin call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.userIds = "userIds_example";

          instance.reportsGetFleetSummaryAdmin(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListFleetSummaryReportItem);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSFleetSummaryReportItem);
                expect(data.totalDistanceMetersFiltered).to.be.a('number');
                expect(data.totalDistanceMetersFiltered).to.be(0.0);
                expect(data.totalDistanceMeters).to.be.a('number');
                expect(data.totalDistanceMeters).to.be(0.0);
                expect(data.totalRunningCostDollarsFiltered).to.be.a('number');
                expect(data.totalRunningCostDollarsFiltered).to.be(0.0);
                expect(data.totalRunningCostDollars).to.be.a('number');
                expect(data.totalRunningCostDollars).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.organisationId).to.be.a('number');
                expect(data.organisationId).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.costPerKilometer).to.be.a('number');
                expect(data.costPerKilometer).to.be(0.0);
                expect(data.make).to.be.a('string');
                expect(data.make).to.be("");
                expect(data.model).to.be.a('string');
                expect(data.model).to.be("");
                expect(data.year).to.be.a('string');
                expect(data.year).to.be("");
                expect(data.licencePlateNumber).to.be.a('string');
                expect(data.licencePlateNumber).to.be("");
                expect(data.isDeleted).to.be.a('boolean');
                expect(data.isDeleted).to.be(false);
                {
                  let dataCtr = data.permittedEmployees;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetOrgTripById', function() {
        it('should call reportsGetOrgTripById successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetOrgTripById call and complete the assertions
          /*
          var tripId = 56;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.reportsGetOrgTripById(tripId, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseTrip);
            expect(data.data).to.be.a(ChronoSheetsApi.CSTrip);
                  expect(data.data.tripId).to.be.a('number');
              expect(data.data.tripId).to.be(0);
              expect(data.data.timesheetId).to.be.a('number');
              expect(data.data.timesheetId).to.be(0);
              expect(data.data.vehicleId).to.be.a('number');
              expect(data.data.vehicleId).to.be(0);
              expect(data.data.userId).to.be.a('number');
              expect(data.data.userId).to.be(0);
              expect(data.data.orgId).to.be.a('number');
              expect(data.data.orgId).to.be(0);
              expect(data.data.mobilePlatform).to.be.a('string');
              expect(data.data.mobilePlatform).to.be("Unknown");
              expect(data.data.startDate).to.be.a(Date);
              expect(data.data.startDate).to.be(new Date());
              expect(data.data.endDate).to.be.a(Date);
              expect(data.data.endDate).to.be(new Date());
              expect(data.data.vehicleName).to.be.a('string');
              expect(data.data.vehicleName).to.be("");
              expect(data.data.vehicleMake).to.be.a('string');
              expect(data.data.vehicleMake).to.be("");
              expect(data.data.vehicleModel).to.be.a('string');
              expect(data.data.vehicleModel).to.be("");
              expect(data.data.vehicleYear).to.be.a('string');
              expect(data.data.vehicleYear).to.be("");
              expect(data.data.costPerKilometer).to.be.a('number');
              expect(data.data.costPerKilometer).to.be(0.0);
              expect(data.data.tripTotalCost).to.be.a('number');
              expect(data.data.tripTotalCost).to.be(0.0);
              expect(data.data.totalTripDistanceMeters).to.be.a('number');
              expect(data.data.totalTripDistanceMeters).to.be(0.0);
              expect(data.data.startAddress).to.be.a('string');
              expect(data.data.startAddress).to.be("");
              expect(data.data.endAddress).to.be.a('string');
              expect(data.data.endAddress).to.be("");
              {
                let dataCtr = data.data.pathCoordinates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(ChronoSheetsApi.CSTripCoordinate);
                  expect(data.latitude).to.be.a('number');
                  expect(data.latitude).to.be(0.0);
                  expect(data.longitude).to.be.a('number');
                  expect(data.longitude).to.be(0.0);
                }
              }
              expect(data.data.cacheExpiryDate).to.be.a(Date);
              expect(data.data.cacheExpiryDate).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetOrganisationTimesheetFileAttachments', function() {
        it('should call reportsGetOrganisationTimesheetFileAttachments successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetOrganisationTimesheetFileAttachments call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.skip = 56;
          opts.take = 56;
          opts.userIds = "userIds_example";

          instance.reportsGetOrganisationTimesheetFileAttachments(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment);
            expect(data.totalSetCount).to.be.a('number');
            expect(data.totalSetCount).to.be(0);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSOrgReportTimesheetFileAttachment);
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("");
                expect(data.timesheetId).to.be.a('number');
                expect(data.timesheetId).to.be(0);
                expect(data.documentS3SignedUrl).to.be.a('string');
                expect(data.documentS3SignedUrl).to.be("");
                expect(data.imageLargeS3SignedUrl).to.be.a('string');
                expect(data.imageLargeS3SignedUrl).to.be("");
                expect(data.imageMediumS3SignedUrl).to.be.a('string');
                expect(data.imageMediumS3SignedUrl).to.be("");
                expect(data.imageSmallS3SignedUrl).to.be.a('string');
                expect(data.imageSmallS3SignedUrl).to.be("");
                expect(data.timesheetStart).to.be.a(Date);
                expect(data.timesheetStart).to.be(new Date());
                expect(data.timesheetEnd).to.be.a(Date);
                expect(data.timesheetEnd).to.be(new Date());
                expect(data.fileAttachmentId).to.be.a('number');
                expect(data.fileAttachmentId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.orgId).to.be.a('number');
                expect(data.orgId).to.be(0);
                expect(data.mobilePlatform).to.be.a('string');
                expect(data.mobilePlatform).to.be("Unknown");
                expect(data.attachmentType).to.be.a('string');
                expect(data.attachmentType).to.be("Image");
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.nonImageFilePath).to.be.a('string');
                expect(data.nonImageFilePath).to.be("");
                expect(data.imageLargeFilePath).to.be.a('string');
                expect(data.imageLargeFilePath).to.be("");
                expect(data.imageMediumFilePath).to.be.a('string');
                expect(data.imageMediumFilePath).to.be("");
                expect(data.imageSmallFilePath).to.be.a('string');
                expect(data.imageSmallFilePath).to.be("");
                expect(data.originalFileName).to.be.a('string');
                expect(data.originalFileName).to.be("");
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.dateUploaded).to.be.a(Date);
                expect(data.dateUploaded).to.be(new Date());
                expect(data.dateImageCaptured).to.be.a(Date);
                expect(data.dateImageCaptured).to.be(new Date());
                expect(data.storageAllocationBytes).to.be.a('number');
                expect(data.storageAllocationBytes).to.be("0");
                expect(data.audioDurationSeconds).to.be.a('number');
                expect(data.audioDurationSeconds).to.be(0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetOrganisationTranscripts', function() {
        it('should call reportsGetOrganisationTranscripts successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetOrganisationTranscripts call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.skip = 56;
          opts.take = 56;
          opts.userIds = "userIds_example";
          opts.keywords = "keywords_example";

          instance.reportsGetOrganisationTranscripts(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseForPaginatedListOrgReportTranscript);
            expect(data.totalSetCount).to.be.a('number');
            expect(data.totalSetCount).to.be(0);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSOrgReportTranscript);
                expect(data.finishedJob).to.be.a('boolean');
                expect(data.finishedJob).to.be(false);
                expect(data.completedProcessing).to.be.a(Date);
                expect(data.completedProcessing).to.be(new Date());
                expect(data.created).to.be.a(Date);
                expect(data.created).to.be(new Date());
                expect(data.startedProcessing).to.be.a(Date);
                expect(data.startedProcessing).to.be(new Date());
                expect(data.transcriptionId).to.be.a('number');
                expect(data.transcriptionId).to.be(0);
                expect(data.jobName).to.be.a('string');
                expect(data.jobName).to.be("");
                expect(data.contents).to.be.a('string');
                expect(data.contents).to.be("");
                expect(data.mediaType).to.be.a('string');
                expect(data.mediaType).to.be("Other");
                expect(data.transcriptionStatus).to.be.a('string');
                expect(data.transcriptionStatus).to.be("Saved");
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("");
                expect(data.timesheetId).to.be.a('number');
                expect(data.timesheetId).to.be(0);
                expect(data.documentS3SignedUrl).to.be.a('string');
                expect(data.documentS3SignedUrl).to.be("");
                expect(data.imageLargeS3SignedUrl).to.be.a('string');
                expect(data.imageLargeS3SignedUrl).to.be("");
                expect(data.imageMediumS3SignedUrl).to.be.a('string');
                expect(data.imageMediumS3SignedUrl).to.be("");
                expect(data.imageSmallS3SignedUrl).to.be.a('string');
                expect(data.imageSmallS3SignedUrl).to.be("");
                expect(data.timesheetStart).to.be.a(Date);
                expect(data.timesheetStart).to.be(new Date());
                expect(data.timesheetEnd).to.be.a(Date);
                expect(data.timesheetEnd).to.be(new Date());
                expect(data.fileAttachmentId).to.be.a('number');
                expect(data.fileAttachmentId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.orgId).to.be.a('number');
                expect(data.orgId).to.be(0);
                expect(data.mobilePlatform).to.be.a('string');
                expect(data.mobilePlatform).to.be("Unknown");
                expect(data.attachmentType).to.be.a('string');
                expect(data.attachmentType).to.be("Image");
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.nonImageFilePath).to.be.a('string');
                expect(data.nonImageFilePath).to.be("");
                expect(data.imageLargeFilePath).to.be.a('string');
                expect(data.imageLargeFilePath).to.be("");
                expect(data.imageMediumFilePath).to.be.a('string');
                expect(data.imageMediumFilePath).to.be("");
                expect(data.imageSmallFilePath).to.be.a('string');
                expect(data.imageSmallFilePath).to.be("");
                expect(data.originalFileName).to.be.a('string');
                expect(data.originalFileName).to.be("");
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.dateUploaded).to.be.a(Date);
                expect(data.dateUploaded).to.be(new Date());
                expect(data.dateImageCaptured).to.be.a(Date);
                expect(data.dateImageCaptured).to.be(new Date());
                expect(data.storageAllocationBytes).to.be.a('number');
                expect(data.storageAllocationBytes).to.be("0");
                expect(data.audioDurationSeconds).to.be.a('number');
                expect(data.audioDurationSeconds).to.be(0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetOrganisationTrips', function() {
        it('should call reportsGetOrganisationTrips successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetOrganisationTrips call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.skip = 56;
          opts.take = 56;
          opts.userIds = "userIds_example";

          instance.reportsGetOrganisationTrips(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseForPaginatedListOrgReportTrip);
            expect(data.totalSetCount).to.be.a('number');
            expect(data.totalSetCount).to.be(0);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSOrgReportTrip);
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("");
                expect(data.tripId).to.be.a('number');
                expect(data.tripId).to.be(0);
                expect(data.timesheetId).to.be.a('number');
                expect(data.timesheetId).to.be(0);
                expect(data.vehicleId).to.be.a('number');
                expect(data.vehicleId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.orgId).to.be.a('number');
                expect(data.orgId).to.be(0);
                expect(data.mobilePlatform).to.be.a('string');
                expect(data.mobilePlatform).to.be("Unknown");
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(new Date());
                expect(data.vehicleName).to.be.a('string');
                expect(data.vehicleName).to.be("");
                expect(data.vehicleMake).to.be.a('string');
                expect(data.vehicleMake).to.be("");
                expect(data.vehicleModel).to.be.a('string');
                expect(data.vehicleModel).to.be("");
                expect(data.vehicleYear).to.be.a('string');
                expect(data.vehicleYear).to.be("");
                expect(data.costPerKilometer).to.be.a('number');
                expect(data.costPerKilometer).to.be(0.0);
                expect(data.tripTotalCost).to.be.a('number');
                expect(data.tripTotalCost).to.be(0.0);
                expect(data.totalTripDistanceMeters).to.be.a('number');
                expect(data.totalTripDistanceMeters).to.be(0.0);
                expect(data.startAddress).to.be.a('string');
                expect(data.startAddress).to.be("");
                expect(data.endAddress).to.be.a('string');
                expect(data.endAddress).to.be("");
                {
                  let dataCtr = data.pathCoordinates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(ChronoSheetsApi.CSTripCoordinate);
                    expect(data.latitude).to.be.a('number');
                    expect(data.latitude).to.be(0.0);
                    expect(data.longitude).to.be.a('number');
                    expect(data.longitude).to.be(0.0);
                  }
                }
                expect(data.cacheExpiryDate).to.be.a(Date);
                expect(data.cacheExpiryDate).to.be(new Date());
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsGetRawDataAdmin', function() {
        it('should call reportsGetRawDataAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsGetRawDataAdmin call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.userIds = "userIds_example";
          opts.sort = "sort_example";
          opts.order = "order_example";
          opts.skip = 56;
          opts.take = 56;

          instance.reportsGetRawDataAdmin(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseForPaginatedListRawReportItem);
            expect(data.totalSetCount).to.be.a('number');
            expect(data.totalSetCount).to.be(0);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSRawReportItem);
                expect(data.organisationId).to.be.a('number');
                expect(data.organisationId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("");
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");
                expect(data.jobCode).to.be.a('string');
                expect(data.jobCode).to.be("");
                expect(data.taskName).to.be.a('string');
                expect(data.taskName).to.be("");
                expect(data.clientName).to.be.a('string');
                expect(data.clientName).to.be("");
                expect(data.projectName).to.be.a('string');
                expect(data.projectName).to.be("");
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(new Date());
                expect(data.spanSeconds).to.be.a('number');
                expect(data.spanSeconds).to.be(0);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.payAmount).to.be.a('number');
                expect(data.payAmount).to.be(0.0);
                expect(data.payOvertimeAmount).to.be.a('number');
                expect(data.payOvertimeAmount).to.be(0.0);
                expect(data.tripCost).to.be.a('number');
                expect(data.tripCost).to.be(0.0);
                expect(data.tripDistanceMeters).to.be.a('number');
                expect(data.tripDistanceMeters).to.be(0.0);
                expect(data.spanSecondsNormalTime).to.be.a('number');
                expect(data.spanSecondsNormalTime).to.be(0);
                expect(data.spanSecondsOvertime).to.be.a('number');
                expect(data.spanSecondsOvertime).to.be(0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsProjectCostingsAdmin', function() {
        it('should call reportsProjectCostingsAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsProjectCostingsAdmin call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.userIds = "userIds_example";

          instance.reportsProjectCostingsAdmin(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListProjectCostingReportItem);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSProjectCostingReportItem);
                expect(data.projectId).to.be.a('number');
                expect(data.projectId).to.be(0);
                expect(data.projectName).to.be.a('string');
                expect(data.projectName).to.be("");
                expect(data.clientId).to.be.a('number');
                expect(data.clientId).to.be(0);
                expect(data.organisationId).to.be.a('number');
                expect(data.organisationId).to.be(0);
                expect(data.clientName).to.be.a('string');
                expect(data.clientName).to.be("");
                expect(data.estimatedCost).to.be.a('number');
                expect(data.estimatedCost).to.be(0.0);
                expect(data.actualCostFiltered).to.be.a('number');
                expect(data.actualCostFiltered).to.be(0.0);
                expect(data.actualCost).to.be.a('number');
                expect(data.actualCost).to.be(0.0);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reportsUserJobsOverTime', function() {
        it('should call reportsUserJobsOverTime successfully', function(done) {
          // TODO: uncomment, update parameter values for reportsUserJobsOverTime call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.reportsUserJobsOverTime(startDate, endDate, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListJobSeriesReportItem);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSJobSeriesReportItem);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(new Date());
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(new Date());
                expect(data.jobId).to.be.a('number');
                expect(data.jobId).to.be(0);
                expect(data.clientId).to.be.a('number');
                expect(data.clientId).to.be(0);
                expect(data.clientName).to.be.a('string');
                expect(data.clientName).to.be("");
                expect(data.projectId).to.be.a('number');
                expect(data.projectId).to.be(0);
                expect(data.projectName).to.be.a('string');
                expect(data.projectName).to.be("");
                expect(data.spanSeconds).to.be.a('number');
                expect(data.spanSeconds).to.be(0);
                expect(data.jobCode).to.be.a('string');
                expect(data.jobCode).to.be("");
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
