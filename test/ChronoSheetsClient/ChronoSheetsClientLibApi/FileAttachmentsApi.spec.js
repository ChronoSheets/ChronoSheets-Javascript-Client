/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChronoSheetsApi.FileAttachmentsApi();
  });

  describe('ChronoSheetsClient', function() {
    describe('FileAttachmentsApi', function() {
      describe('fileAttachmentsDeleteTimesheetFileAttachment', function() {
        it('should call fileAttachmentsDeleteTimesheetFileAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for fileAttachmentsDeleteTimesheetFileAttachment call and complete the assertions
          /*
          var fileAttachmentId = 56;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.fileAttachmentsDeleteTimesheetFileAttachment(fileAttachmentId, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseBoolean);
            expect(data.data).to.be.a('boolean');
            expect(data.data).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fileAttachmentsGetFileAttachmentById', function() {
        it('should call fileAttachmentsGetFileAttachmentById successfully', function(done) {
          // TODO: uncomment, update parameter values for fileAttachmentsGetFileAttachmentById call and complete the assertions
          /*
          var fileAttachmentId = 56;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.fileAttachmentsGetFileAttachmentById(fileAttachmentId, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseTimesheetFileAttachment);
            expect(data.data).to.be.a(ChronoSheetsApi.CSTimesheetFileAttachment);
                  expect(data.data.timesheetId).to.be.a('number');
              expect(data.data.timesheetId).to.be(0);
              expect(data.data.documentS3SignedUrl).to.be.a('string');
              expect(data.data.documentS3SignedUrl).to.be("");
              expect(data.data.imageLargeS3SignedUrl).to.be.a('string');
              expect(data.data.imageLargeS3SignedUrl).to.be("");
              expect(data.data.imageMediumS3SignedUrl).to.be.a('string');
              expect(data.data.imageMediumS3SignedUrl).to.be("");
              expect(data.data.imageSmallS3SignedUrl).to.be.a('string');
              expect(data.data.imageSmallS3SignedUrl).to.be("");
              expect(data.data.timesheetStart).to.be.a(Date);
              expect(data.data.timesheetStart).to.be(new Date());
              expect(data.data.timesheetEnd).to.be.a(Date);
              expect(data.data.timesheetEnd).to.be(new Date());
              expect(data.data.fileAttachmentId).to.be.a('number');
              expect(data.data.fileAttachmentId).to.be(0);
              expect(data.data.userId).to.be.a('number');
              expect(data.data.userId).to.be(0);
              expect(data.data.orgId).to.be.a('number');
              expect(data.data.orgId).to.be(0);
              expect(data.data.mobilePlatform).to.be.a('string');
              expect(data.data.mobilePlatform).to.be("Unknown");
              expect(data.data.attachmentType).to.be.a('string');
              expect(data.data.attachmentType).to.be("Image");
              expect(data.data.notes).to.be.a('string');
              expect(data.data.notes).to.be("");
              expect(data.data.nonImageFilePath).to.be.a('string');
              expect(data.data.nonImageFilePath).to.be("");
              expect(data.data.imageLargeFilePath).to.be.a('string');
              expect(data.data.imageLargeFilePath).to.be("");
              expect(data.data.imageMediumFilePath).to.be.a('string');
              expect(data.data.imageMediumFilePath).to.be("");
              expect(data.data.imageSmallFilePath).to.be.a('string');
              expect(data.data.imageSmallFilePath).to.be("");
              expect(data.data.originalFileName).to.be.a('string');
              expect(data.data.originalFileName).to.be("");
              expect(data.data.latitude).to.be.a('number');
              expect(data.data.latitude).to.be(0.0);
              expect(data.data.longitude).to.be.a('number');
              expect(data.data.longitude).to.be(0.0);
              expect(data.data.dateUploaded).to.be.a(Date);
              expect(data.data.dateUploaded).to.be(new Date());
              expect(data.data.dateImageCaptured).to.be.a(Date);
              expect(data.data.dateImageCaptured).to.be(new Date());
              expect(data.data.storageAllocationBytes).to.be.a('number');
              expect(data.data.storageAllocationBytes).to.be("0");
              expect(data.data.audioDurationSeconds).to.be.a('number');
              expect(data.data.audioDurationSeconds).to.be(0);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fileAttachmentsGetMyFileAttachments', function() {
        it('should call fileAttachmentsGetMyFileAttachments successfully', function(done) {
          // TODO: uncomment, update parameter values for fileAttachmentsGetMyFileAttachments call and complete the assertions
          /*
          var startDate = new Date("2013-10-20T19:20:30+01:00");
          var endDate = new Date("2013-10-20T19:20:30+01:00");
          var xChronosheetsAuth = "xChronosheetsAuth_example";
          var opts = {};
          opts.skip = 56;
          opts.take = 56;

          instance.fileAttachmentsGetMyFileAttachments(startDate, endDate, xChronosheetsAuth, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseForPaginatedListTimesheetFileAttachment);
            expect(data.totalSetCount).to.be.a('number');
            expect(data.totalSetCount).to.be(0);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSTimesheetFileAttachment);
                expect(data.timesheetId).to.be.a('number');
                expect(data.timesheetId).to.be(0);
                expect(data.documentS3SignedUrl).to.be.a('string');
                expect(data.documentS3SignedUrl).to.be("");
                expect(data.imageLargeS3SignedUrl).to.be.a('string');
                expect(data.imageLargeS3SignedUrl).to.be("");
                expect(data.imageMediumS3SignedUrl).to.be.a('string');
                expect(data.imageMediumS3SignedUrl).to.be("");
                expect(data.imageSmallS3SignedUrl).to.be.a('string');
                expect(data.imageSmallS3SignedUrl).to.be("");
                expect(data.timesheetStart).to.be.a(Date);
                expect(data.timesheetStart).to.be(new Date());
                expect(data.timesheetEnd).to.be.a(Date);
                expect(data.timesheetEnd).to.be(new Date());
                expect(data.fileAttachmentId).to.be.a('number');
                expect(data.fileAttachmentId).to.be(0);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(0);
                expect(data.orgId).to.be.a('number');
                expect(data.orgId).to.be(0);
                expect(data.mobilePlatform).to.be.a('string');
                expect(data.mobilePlatform).to.be("Unknown");
                expect(data.attachmentType).to.be.a('string');
                expect(data.attachmentType).to.be("Image");
                expect(data.notes).to.be.a('string');
                expect(data.notes).to.be("");
                expect(data.nonImageFilePath).to.be.a('string');
                expect(data.nonImageFilePath).to.be("");
                expect(data.imageLargeFilePath).to.be.a('string');
                expect(data.imageLargeFilePath).to.be("");
                expect(data.imageMediumFilePath).to.be.a('string');
                expect(data.imageMediumFilePath).to.be("");
                expect(data.imageSmallFilePath).to.be.a('string');
                expect(data.imageSmallFilePath).to.be("");
                expect(data.originalFileName).to.be.a('string');
                expect(data.originalFileName).to.be("");
                expect(data.latitude).to.be.a('number');
                expect(data.latitude).to.be(0.0);
                expect(data.longitude).to.be.a('number');
                expect(data.longitude).to.be(0.0);
                expect(data.dateUploaded).to.be.a(Date);
                expect(data.dateUploaded).to.be(new Date());
                expect(data.dateImageCaptured).to.be.a(Date);
                expect(data.dateImageCaptured).to.be(new Date());
                expect(data.storageAllocationBytes).to.be.a('number');
                expect(data.storageAllocationBytes).to.be("0");
                expect(data.audioDurationSeconds).to.be.a('number');
                expect(data.audioDurationSeconds).to.be(0);

                      }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
