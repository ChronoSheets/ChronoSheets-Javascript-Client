/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../../src/ChronoSheetsClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../../src/ChronoSheetsClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChronoSheetsApi.OrganisationGroupUsersApi();
  });

  describe('ChronoSheetsClient', function() {
    describe('OrganisationGroupUsersApi', function() {
      describe('organisationGroupUsersGetOrganisationGroupUsers', function() {
        it('should call organisationGroupUsersGetOrganisationGroupUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for organisationGroupUsersGetOrganisationGroupUsers call and complete the assertions
          /*
          var orgGroupId = 56;
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.organisationGroupUsersGetOrganisationGroupUsers(orgGroupId, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseListUserForManagement);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(ChronoSheetsApi.CSUserForManagement);
                expect(data.isAccountActive).to.be.a('boolean');
                expect(data.isAccountActive).to.be(false);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.organisationId).to.be.a('number');
                expect(data.organisationId).to.be(0);
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("");
                expect(data.emailAddress).to.be.a('string');
                expect(data.emailAddress).to.be("");
                expect(data.roles).to.be.a('number');
                expect(data.roles).to.be("0");
                expect(data.alertSettings).to.be.a('number');
                expect(data.alertSettings).to.be("0");
                expect(data.setupWizardRequired).to.be.a('boolean');
                expect(data.setupWizardRequired).to.be(false);
                expect(data.isSubscribedToNewsletter).to.be.a('boolean');
                expect(data.isSubscribedToNewsletter).to.be(false);
                expect(data.organisation).to.be.a(ChronoSheetsApi.CSOrganisation);
                      expect(data.organisation.id).to.be.a('number');
                  expect(data.organisation.id).to.be(0);
                  expect(data.organisation.name).to.be.a('string');
                  expect(data.organisation.name).to.be("");
                  expect(data.organisation.addressLine01).to.be.a('string');
                  expect(data.organisation.addressLine01).to.be("");
                  expect(data.organisation.addressLine02).to.be.a('string');
                  expect(data.organisation.addressLine02).to.be("");
                  expect(data.organisation.suburb).to.be.a('string');
                  expect(data.organisation.suburb).to.be("");
                  expect(data.organisation.state).to.be.a('string');
                  expect(data.organisation.state).to.be("");
                  expect(data.organisation.postcode).to.be.a('string');
                  expect(data.organisation.postcode).to.be("");
                  expect(data.organisation.country).to.be.a('string');
                  expect(data.organisation.country).to.be("");
                  expect(data.organisation.phone).to.be.a('string');
                  expect(data.organisation.phone).to.be("");
                  expect(data.organisation.emailAddress).to.be.a('string');
                  expect(data.organisation.emailAddress).to.be("");
                  expect(data.organisation.timezone).to.be.a('string');
                  expect(data.organisation.timezone).to.be("");
                  expect(data.organisation.subscriptionCustomerId).to.be.a('string');
                  expect(data.organisation.subscriptionCustomerId).to.be("");
                  expect(data.organisation.signupToken).to.be.a('string');
                  expect(data.organisation.signupToken).to.be("");
                  expect(data.organisation.isActive).to.be.a('boolean');
                  expect(data.organisation.isActive).to.be(false);
                  expect(data.organisation.stripeCouponCode).to.be.a('string');
                  expect(data.organisation.stripeCouponCode).to.be("");
                  expect(data.organisation.subscriptionSource).to.be.a('string');
                  expect(data.organisation.subscriptionSource).to.be("None");
                  expect(data.organisation.signUpSource).to.be.a('string');
                  expect(data.organisation.signUpSource).to.be("Desktop");
                  expect(data.organisation.mobileSignUpCode).to.be.a('string');
                  expect(data.organisation.mobileSignUpCode).to.be("");
                  expect(data.organisation.subscriptionCycleStart).to.be.a(Date);
                  expect(data.organisation.subscriptionCycleStart).to.be(new Date());
                  expect(data.organisation.subscriptionCycleEnd).to.be.a(Date);
                  expect(data.organisation.subscriptionCycleEnd).to.be(new Date());
                  {
                    let dataCtr = data.organisation.pricingPlans;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(ChronoSheetsApi.CSOrganisationPricingPlan);
                      expect(data.planId).to.be.a('string');
                      expect(data.planId).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0);
                    }
                  }
                expect(data.isPrimaryAccount).to.be.a('boolean');
                expect(data.isPrimaryAccount).to.be(false);
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('organisationGroupUsersUpdateOrganisationGroupUsers', function() {
        it('should call organisationGroupUsersUpdateOrganisationGroupUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for organisationGroupUsersUpdateOrganisationGroupUsers call and complete the assertions
          /*
          var request = new ChronoSheetsApi.CSSetOrganisationGroupUsersRequest();
          request.organisationGroupId = 0;
          request.csvUserIds = "";
          var xChronosheetsAuth = "xChronosheetsAuth_example";

          instance.organisationGroupUsersUpdateOrganisationGroupUsers(request, xChronosheetsAuth, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ChronoSheetsApi.CSApiResponseBoolean);
            expect(data.data).to.be.a('boolean');
            expect(data.data).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Succeeded");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
