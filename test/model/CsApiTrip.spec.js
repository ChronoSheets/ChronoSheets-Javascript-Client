/**
 * ChronoSheets API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChronoSheetsApi);
  }
}(this, function(expect, ChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChronoSheetsApi.CsApiTrip();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CsApiTrip', function() {
    it('should create an instance of CsApiTrip', function() {
      // uncomment below and update the code to test CsApiTrip
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be.a(ChronoSheetsApi.CsApiTrip);
    });

    it('should have the property tripId (base name: "TripId")', function() {
      // uncomment below and update the code to test the property tripId
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property timesheetId (base name: "TimesheetId")', function() {
      // uncomment below and update the code to test the property timesheetId
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property vehicleId (base name: "VehicleId")', function() {
      // uncomment below and update the code to test the property vehicleId
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "UserId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property orgId (base name: "OrgId")', function() {
      // uncomment below and update the code to test the property orgId
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property mobilePlatform (base name: "MobilePlatform")', function() {
      // uncomment below and update the code to test the property mobilePlatform
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property vehicleName (base name: "VehicleName")', function() {
      // uncomment below and update the code to test the property vehicleName
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property vehicleMake (base name: "VehicleMake")', function() {
      // uncomment below and update the code to test the property vehicleMake
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property vehicleModel (base name: "VehicleModel")', function() {
      // uncomment below and update the code to test the property vehicleModel
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property vehicleYear (base name: "VehicleYear")', function() {
      // uncomment below and update the code to test the property vehicleYear
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property costPerKilometer (base name: "CostPerKilometer")', function() {
      // uncomment below and update the code to test the property costPerKilometer
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property tripTotalCost (base name: "TripTotalCost")', function() {
      // uncomment below and update the code to test the property tripTotalCost
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property totalTripDistanceMeters (base name: "TotalTripDistanceMeters")', function() {
      // uncomment below and update the code to test the property totalTripDistanceMeters
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property startAddress (base name: "StartAddress")', function() {
      // uncomment below and update the code to test the property startAddress
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property endAddress (base name: "EndAddress")', function() {
      // uncomment below and update the code to test the property endAddress
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property pathCoordinates (base name: "PathCoordinates")', function() {
      // uncomment below and update the code to test the property pathCoordinates
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

    it('should have the property cacheExpiryDate (base name: "CacheExpiryDate")', function() {
      // uncomment below and update the code to test the property cacheExpiryDate
      //var instane = new ChronoSheetsApi.CsApiTrip();
      //expect(instance).to.be();
    });

  });

}));
