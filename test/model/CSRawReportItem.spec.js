/**
 * The ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  </p>  <p>      First Steps:       <ol>          <li>Make sure you've <a href='/HomeV2/App/sign-up'>signed up to ChronoSheets</a> to get yourself a user account</li>          <li>Confirm your account by following the link sent to your email address.  This will activate your account</li>          <li>Use your username and password to obtain an Auth Token by using the DoLogin method inside the UserProfile section below.  Use the Auth Token as an argument to the other methods</li>          <li>Try different methods in the API Playground to learn about the API</li>          <li>If you're stuck, try the full getting started guide on the <a href='/Home/ApiDocs'>API Toolkit</a> page.</li>      </ol>  </p>  <p>      Further Steps:       <ul>          <li>Create a mobile app (iOS, Android or Windows) using one of the ChronoSheets Mobile SDKs</li>          <li>Create a custom integration with your app using one of the ChronoSheets API Client Libraries.</li>      </ul>      Read more about the API Toolkit on the <a href='/Home/ApiDocs'>API Toolkit</a> page.  </p></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheChronoSheetsApi);
  }
}(this, function(expect, TheChronoSheetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheChronoSheetsApi.CSRawReportItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CSRawReportItem', function() {
    it('should create an instance of CSRawReportItem', function() {
      // uncomment below and update the code to test CSRawReportItem
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be.a(TheChronoSheetsApi.CSRawReportItem);
    });

    it('should have the property organisationId (base name: "OrganisationId")', function() {
      // uncomment below and update the code to test the property organisationId
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "UserId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "Username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property emailAddress (base name: "EmailAddress")', function() {
      // uncomment below and update the code to test the property emailAddress
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property jobCode (base name: "JobCode")', function() {
      // uncomment below and update the code to test the property jobCode
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property taskName (base name: "TaskName")', function() {
      // uncomment below and update the code to test the property taskName
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property clientName (base name: "ClientName")', function() {
      // uncomment below and update the code to test the property clientName
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property projectName (base name: "ProjectName")', function() {
      // uncomment below and update the code to test the property projectName
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property spanSeconds (base name: "SpanSeconds")', function() {
      // uncomment below and update the code to test the property spanSeconds
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property payAmount (base name: "PayAmount")', function() {
      // uncomment below and update the code to test the property payAmount
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property payOvertimeAmount (base name: "PayOvertimeAmount")', function() {
      // uncomment below and update the code to test the property payOvertimeAmount
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property tripCost (base name: "TripCost")', function() {
      // uncomment below and update the code to test the property tripCost
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

    it('should have the property tripDistanceMeters (base name: "TripDistanceMeters")', function() {
      // uncomment below and update the code to test the property tripDistanceMeters
      //var instane = new TheChronoSheetsApi.CSRawReportItem();
      //expect(instance).to.be();
    });

  });

}));
