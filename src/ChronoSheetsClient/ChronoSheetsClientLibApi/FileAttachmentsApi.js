/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseBoolean from '../ChronoSheetsClientLibModel/ApiResponseBoolean';
import ApiResponseForPaginatedListTimesheetFileAttachment from '../ChronoSheetsClientLibModel/ApiResponseForPaginatedListTimesheetFileAttachment';
import ApiResponseTimesheetFileAttachment from '../ChronoSheetsClientLibModel/ApiResponseTimesheetFileAttachment';

/**
* FileAttachments service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi
* @version 1.0.0
*/
export default class FileAttachmentsApi {

    /**
    * Constructs a new FileAttachmentsApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fileAttachmentsDeleteTimesheetFileAttachment operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsDeleteTimesheetFileAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a particular timesheet file attachment  Requires the 'SubmitTimesheets' permission.
     * @param {Number} fileAttachmentId The Id of the file attachment to delete
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsDeleteTimesheetFileAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    fileAttachmentsDeleteTimesheetFileAttachment(fileAttachmentId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'fileAttachmentId' is set
      if (fileAttachmentId === undefined || fileAttachmentId === null) {
        throw new Error("Missing the required parameter 'fileAttachmentId' when calling fileAttachmentsDeleteTimesheetFileAttachment");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fileAttachmentsDeleteTimesheetFileAttachment");
      }

      let pathParams = {
      };
      let queryParams = {
        'FileAttachmentId': fileAttachmentId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/FileAttachments/DeleteTimesheetFileAttachment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAttachmentsGetFileAttachmentById operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsGetFileAttachmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseTimesheetFileAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular file attachment by ID.  User must own the file attachment for access.
     * @param {Number} fileAttachmentId The ID of the file attachment
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsGetFileAttachmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseTimesheetFileAttachment}
     */
    fileAttachmentsGetFileAttachmentById(fileAttachmentId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'fileAttachmentId' is set
      if (fileAttachmentId === undefined || fileAttachmentId === null) {
        throw new Error("Missing the required parameter 'fileAttachmentId' when calling fileAttachmentsGetFileAttachmentById");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fileAttachmentsGetFileAttachmentById");
      }

      let pathParams = {
      };
      let queryParams = {
        'FileAttachmentId': fileAttachmentId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseTimesheetFileAttachment;
      return this.apiClient.callApi(
        '/FileAttachments/GetFileAttachmentById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAttachmentsGetMyFileAttachments operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsGetMyFileAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListTimesheetFileAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get my file attachments.  Get files you've attached to timesheets.
     * @param {Date} startDate The Start date of the date range.  File attachments after this date will be obtained.
     * @param {Date} endDate The End date of the date range.  File attachments before this date will be obtained.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Skip this many File attachments
     * @param {Number} opts.take Take this many File attachments
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FileAttachmentsApi~fileAttachmentsGetMyFileAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListTimesheetFileAttachment}
     */
    fileAttachmentsGetMyFileAttachments(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling fileAttachmentsGetMyFileAttachments");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling fileAttachmentsGetMyFileAttachments");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fileAttachmentsGetMyFileAttachments");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseForPaginatedListTimesheetFileAttachment;
      return this.apiClient.callApi(
        '/FileAttachments/GetMyFileAttachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
