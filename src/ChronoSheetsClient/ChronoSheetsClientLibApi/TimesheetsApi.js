/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseBoolean from '../ChronoSheetsClientLibModel/ApiResponseBoolean';
import ApiResponseInt32 from '../ChronoSheetsClientLibModel/ApiResponseInt32';
import ApiResponseListInt32 from '../ChronoSheetsClientLibModel/ApiResponseListInt32';
import ApiResponseListTimesheet from '../ChronoSheetsClientLibModel/ApiResponseListTimesheet';
import BatchUpdateTimesheetRequest from '../ChronoSheetsClientLibModel/BatchUpdateTimesheetRequest';
import Timesheet from '../ChronoSheetsClientLibModel/Timesheet';

/**
* Timesheets service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi
* @version 1.0.0
*/
export default class TimesheetsApi {

    /**
    * Constructs a new TimesheetsApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the timesheetsCreateSingleTimesheet operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsCreateSingleTimesheetCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a single timesheet record.    Requires the 'SubmitTimesheets' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/Timesheet} request A Timesheet Request object containing values for the new Timesheet to create
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsCreateSingleTimesheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32}
     */
    timesheetsCreateSingleTimesheet(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetsCreateSingleTimesheet");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling timesheetsCreateSingleTimesheet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseInt32;
      return this.apiClient.callApi(
        '/Timesheets/CreateSingleTimesheet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timesheetsDeleteTimesheet operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsDeleteTimesheetCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a timesheet.    Requires the 'SubmitTimesheets' permission.
     * @param {Number} timesheetId The ID of the Timesheet you want to delete
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsDeleteTimesheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    timesheetsDeleteTimesheet(timesheetId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'timesheetId' is set
      if (timesheetId === undefined || timesheetId === null) {
        throw new Error("Missing the required parameter 'timesheetId' when calling timesheetsDeleteTimesheet");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetsDeleteTimesheet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TimesheetId': timesheetId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/Timesheets/DeleteTimesheet', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timesheetsGetTimesheets operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsGetTimesheetsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListTimesheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the 'SubmitTimesheets' permission.
     * @param {Date} startDate The start date of the date range
     * @param {Date} endDate The end date of the date range
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsGetTimesheetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListTimesheet}
     */
    timesheetsGetTimesheets(startDate, endDate, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling timesheetsGetTimesheets");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling timesheetsGetTimesheets");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetsGetTimesheets");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListTimesheet;
      return this.apiClient.callApi(
        '/Timesheets/GetTimesheets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timesheetsUpdateTimesheets operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsUpdateTimesheetsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch update timesheets.    Requires the 'SubmitTimesheets' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/BatchUpdateTimesheetRequest} request A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetsApi~timesheetsUpdateTimesheetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListInt32}
     */
    timesheetsUpdateTimesheets(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetsUpdateTimesheets");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling timesheetsUpdateTimesheets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListInt32;
      return this.apiClient.callApi(
        '/Timesheets/UpdateTimesheets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
