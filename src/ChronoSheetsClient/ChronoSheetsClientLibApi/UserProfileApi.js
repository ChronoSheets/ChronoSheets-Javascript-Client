/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseBoolean from '../ChronoSheetsClientLibModel/ApiResponseBoolean';
import ApiResponseDoLoginResponse from '../ChronoSheetsClientLibModel/ApiResponseDoLoginResponse';
import ApiResponseUpdateProfileResponse from '../ChronoSheetsClientLibModel/ApiResponseUpdateProfileResponse';
import ApiResponseUserProfile from '../ChronoSheetsClientLibModel/ApiResponseUserProfile';
import DoLoginRequest from '../ChronoSheetsClientLibModel/DoLoginRequest';
import UpdateMyProfileRequest from '../ChronoSheetsClientLibModel/UpdateMyProfileRequest';

/**
* UserProfile service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi
* @version 1.0.0
*/
export default class UserProfileApi {

    /**
    * Constructs a new UserProfileApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userProfileDoLogin operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileDoLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseDoLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/DoLoginRequest} request A request object containing your username/email and password.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileDoLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseDoLoginResponse}
     */
    userProfileDoLogin(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling userProfileDoLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseDoLoginResponse;
      return this.apiClient.callApi(
        '/UserProfile/DoLogin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProfileDoLogout operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileDoLogoutCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileDoLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    userProfileDoLogout(xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling userProfileDoLogout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/UserProfile/DoLogout', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProfileGetMyProfile operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileGetMyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseUserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileGetMyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseUserProfile}
     */
    userProfileGetMyProfile(xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling userProfileGetMyProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseUserProfile;
      return this.apiClient.callApi(
        '/UserProfile/GetMyProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProfileKeepSessionAlive operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileKeepSessionAliveCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Keep a session alive.  Use this method to keep a session active.  You could use this to 'ping' ChronoSheets every 'x' minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileKeepSessionAliveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    userProfileKeepSessionAlive(xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling userProfileKeepSessionAlive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/UserProfile/KeepSessionAlive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userProfileUpdateMyProfile operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileUpdateMyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseUpdateProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/UpdateMyProfileRequest} request An Update MyProfile Request object containing updated fields.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UserProfileApi~userProfileUpdateMyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseUpdateProfileResponse}
     */
    userProfileUpdateMyProfile(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling userProfileUpdateMyProfile");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling userProfileUpdateMyProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseUpdateProfileResponse;
      return this.apiClient.callApi(
        '/UserProfile/UpdateMyProfile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
