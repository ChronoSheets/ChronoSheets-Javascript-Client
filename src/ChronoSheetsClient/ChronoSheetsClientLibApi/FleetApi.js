/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseBoolean from '../ChronoSheetsClientLibModel/ApiResponseBoolean';
import ApiResponseFleetVehicle from '../ChronoSheetsClientLibModel/ApiResponseFleetVehicle';
import ApiResponseInt32 from '../ChronoSheetsClientLibModel/ApiResponseInt32';
import ApiResponseListFleetVehicle from '../ChronoSheetsClientLibModel/ApiResponseListFleetVehicle';
import InsertVehicleRequest from '../ChronoSheetsClientLibModel/InsertVehicleRequest';
import SaveVehicleRequest from '../ChronoSheetsClientLibModel/SaveVehicleRequest';

/**
* Fleet service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi
* @version 1.0.0
*/
export default class FleetApi {

    /**
    * Constructs a new FleetApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fleetCreateVehicle operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetCreateVehicleCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a vehicle.    Requires the 'ManageFleet' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/InsertVehicleRequest} request An Insert Vehicle Request object containing values for the new Vehicle to create
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetCreateVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32}
     */
    fleetCreateVehicle(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fleetCreateVehicle");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling fleetCreateVehicle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseInt32;
      return this.apiClient.callApi(
        '/Fleet/CreateVehicle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fleetDeleteVehicle operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetDeleteVehicleCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a vehicle from the fleet.  Requires the 'ManageFleet' permission.
     * @param {Number} vehicleId The unique ID of the vehicle you wish to delete
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetDeleteVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    fleetDeleteVehicle(vehicleId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling fleetDeleteVehicle");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fleetDeleteVehicle");
      }

      let pathParams = {
      };
      let queryParams = {
        'VehicleId': vehicleId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/Fleet/DeleteVehicle', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fleetGetVehicleById operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetGetVehicleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseFleetVehicle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular vehicle.  Does not require any special permission.
     * @param {Number} vehicleId The ID of the Vehicle you want to get
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetGetVehicleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseFleetVehicle}
     */
    fleetGetVehicleById(vehicleId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling fleetGetVehicleById");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fleetGetVehicleById");
      }

      let pathParams = {
      };
      let queryParams = {
        'VehicleId': vehicleId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseFleetVehicle;
      return this.apiClient.callApi(
        '/Fleet/GetVehicleById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fleetGetVehicles operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetGetVehiclesCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListFleetVehicle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a collection of vehicles that are under your organisation.    Does not require any special permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted Whether or not to include deleted vehicles
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetGetVehiclesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListFleetVehicle}
     */
    fleetGetVehicles(xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fleetGetVehicles");
      }

      let pathParams = {
      };
      let queryParams = {
        'IncludeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListFleetVehicle;
      return this.apiClient.callApi(
        '/Fleet/GetVehicles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fleetUpdateVehicle operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetUpdateVehicleCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a vehicle.    Requires the 'ManageFleet' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/SaveVehicleRequest} request A Save Vehicle Request object containing updated fields.  Make sure to specify the Vehicle Id in the request object so that ChronoSheets knows which Vehicle to update
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/FleetApi~fleetUpdateVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    fleetUpdateVehicle(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling fleetUpdateVehicle");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling fleetUpdateVehicle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/Fleet/UpdateVehicle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
