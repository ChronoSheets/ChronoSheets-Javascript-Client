/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListExtendedGeofence', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseGeofence', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSCreateGeoFenceRequest', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSUpdateGeoFenceRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ChronoSheetsClientLibModel/CSApiResponseForPaginatedListExtendedGeofence'), require('../ChronoSheetsClientLibModel/CSApiResponseGeofence'), require('../ChronoSheetsClientLibModel/CSApiResponseInt32'), require('../ChronoSheetsClientLibModel/CSCreateGeoFenceRequest'), require('../ChronoSheetsClientLibModel/CSUpdateGeoFenceRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.GeoFencingApi = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CSApiResponseForPaginatedListExtendedGeofence, root.ChronoSheetsApi.CSApiResponseGeofence, root.ChronoSheetsApi.CSApiResponseInt32, root.ChronoSheetsApi.CSCreateGeoFenceRequest, root.ChronoSheetsApi.CSUpdateGeoFenceRequest);
  }
}(this, function(ApiClient, CSApiResponseForPaginatedListExtendedGeofence, CSApiResponseGeofence, CSApiResponseInt32, CSCreateGeoFenceRequest, CSUpdateGeoFenceRequest) {
  'use strict';

  /**
   * GeoFencing service.
   * @module ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GeoFencingApi. 
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi
   * @class
   * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the geoFencingCreateGeofence operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingCreateGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSCreateGeoFenceRequest} request 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingCreateGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32}
     */
    this.geoFencingCreateGeofence = function(request, xChronosheetsAuth, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling geoFencingCreateGeofence");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling geoFencingCreateGeofence");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseInt32;

      return this.apiClient.callApi(
        '/api/GeoFencing/CreateGeofence', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geoFencingDeleteGeofence operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingDeleteGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseGeofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a geofence.  Requires the 'ManageGeofencing' permission.
     * @param {Number} geofenceId Specify the geofence you want to delete with the geofence ID.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingDeleteGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseGeofence}
     */
    this.geoFencingDeleteGeofence = function(geofenceId, xChronosheetsAuth, callback) {
      var postBody = null;

      // verify the required parameter 'geofenceId' is set
      if (geofenceId === undefined || geofenceId === null) {
        throw new Error("Missing the required parameter 'geofenceId' when calling geoFencingDeleteGeofence");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling geoFencingDeleteGeofence");
      }


      var pathParams = {
      };
      var queryParams = {
        'GeofenceId': geofenceId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseGeofence;

      return this.apiClient.callApi(
        '/api/GeoFencing/DeleteGeofence', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geoFencingGetGeofenceById operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingGetGeofenceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseGeofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a geofence by ID  Requires the 'SubmitTimesheets' permission.
     * @param {Number} geofenceId The ID of the geofence you want to obtain
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingGetGeofenceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseGeofence}
     */
    this.geoFencingGetGeofenceById = function(geofenceId, xChronosheetsAuth, callback) {
      var postBody = null;

      // verify the required parameter 'geofenceId' is set
      if (geofenceId === undefined || geofenceId === null) {
        throw new Error("Missing the required parameter 'geofenceId' when calling geoFencingGetGeofenceById");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling geoFencingGetGeofenceById");
      }


      var pathParams = {
      };
      var queryParams = {
        'GeofenceId': geofenceId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseGeofence;

      return this.apiClient.callApi(
        '/api/GeoFencing/GetGeofenceById', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geoFencingGetGeofences operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingGetGeofencesCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListExtendedGeofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get geofences belonging to your organisation  Requires the 'SubmitTimesheets' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Number of records to skip
     * @param {Number} opts.take Number of records to take
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingGetGeofencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListExtendedGeofence}
     */
    this.geoFencingGetGeofences = function(xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling geoFencingGetGeofences");
      }


      var pathParams = {
      };
      var queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseForPaginatedListExtendedGeofence;

      return this.apiClient.callApi(
        '/api/GeoFencing/GetGeofences', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geoFencingUpdateGeofence operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingUpdateGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSUpdateGeoFenceRequest} request 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/GeoFencingApi~geoFencingUpdateGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32}
     */
    this.geoFencingUpdateGeofence = function(request, xChronosheetsAuth, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling geoFencingUpdateGeofence");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling geoFencingUpdateGeofence");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseInt32;

      return this.apiClient.callApi(
        '/api/GeoFencing/UpdateGeofence', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
