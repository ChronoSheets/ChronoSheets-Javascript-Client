/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSCreateAutomationStepRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ChronoSheetsClientLibModel/CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence'), require('../ChronoSheetsClientLibModel/CSApiResponseInt32'), require('../ChronoSheetsClientLibModel/CSCreateAutomationStepRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.TimesheetAutomationApi = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence, root.ChronoSheetsApi.CSApiResponseInt32, root.ChronoSheetsApi.CSCreateAutomationStepRequest);
  }
}(this, function(ApiClient, CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence, CSApiResponseInt32, CSCreateAutomationStepRequest) {
  'use strict';

  /**
   * TimesheetAutomation service.
   * @module ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TimesheetAutomationApi. 
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi
   * @class
   * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the timesheetAutomationCreateAutomationStep operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi~timesheetAutomationCreateAutomationStepCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSCreateAutomationStepRequest} request 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi~timesheetAutomationCreateAutomationStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseInt32}
     */
    this.timesheetAutomationCreateAutomationStep = function(request, xChronosheetsAuth, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling timesheetAutomationCreateAutomationStep");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetAutomationCreateAutomationStep");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseInt32;

      return this.apiClient.callApi(
        '/TimesheetAutomation/CreateAutomationStep', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timesheetAutomationGetTimesheetAutomationAuditTrail operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi~timesheetAutomationGetTimesheetAutomationAuditTrailCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     * @param {Number} geofenceId The ID of the Geofence
     * @param {Number} userId 
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/String} sort 
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/String} order 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Skip this many records
     * @param {Number} opts.take Take this many records
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/TimesheetAutomationApi~timesheetAutomationGetTimesheetAutomationAuditTrailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence}
     */
    this.timesheetAutomationGetTimesheetAutomationAuditTrail = function(geofenceId, userId, sort, order, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'geofenceId' is set
      if (geofenceId === undefined || geofenceId === null) {
        throw new Error("Missing the required parameter 'geofenceId' when calling timesheetAutomationGetTimesheetAutomationAuditTrail");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling timesheetAutomationGetTimesheetAutomationAuditTrail");
      }

      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling timesheetAutomationGetTimesheetAutomationAuditTrail");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling timesheetAutomationGetTimesheetAutomationAuditTrail");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling timesheetAutomationGetTimesheetAutomationAuditTrail");
      }


      var pathParams = {
      };
      var queryParams = {
        'GeofenceId': geofenceId,
        'UserId': userId,
        'Sort': sort,
        'Order': order,
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CSApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence;

      return this.apiClient.callApi(
        '/TimesheetAutomation/GetTimesheetAutomationAuditTrail', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
