/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseBoolean from '../ChronoSheetsClientLibModel/ApiResponseBoolean';
import ApiResponseInt32 from '../ChronoSheetsClientLibModel/ApiResponseInt32';
import ApiResponseJobCode from '../ChronoSheetsClientLibModel/ApiResponseJobCode';
import ApiResponseListJobCode from '../ChronoSheetsClientLibModel/ApiResponseListJobCode';
import InsertJobCodeRequest from '../ChronoSheetsClientLibModel/InsertJobCodeRequest';
import UpdateJobCodeRequest from '../ChronoSheetsClientLibModel/UpdateJobCodeRequest';

/**
* JobCodes service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi
* @version 1.0.0
*/
export default class JobCodesApi {

    /**
    * Constructs a new JobCodesApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobCodesCreateJobCode operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesCreateJobCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a job code.    Requires the 'ManageJobsAndTask' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/InsertJobCodeRequest} request An Insert JobCode Request object containing values for the new JobCode to create
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesCreateJobCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseInt32}
     */
    jobCodesCreateJobCode(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling jobCodesCreateJobCode");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling jobCodesCreateJobCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseInt32;
      return this.apiClient.callApi(
        '/JobCodes/CreateJobCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCodesDeleteJobCode operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesDeleteJobCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a job code.    Requires the 'ManageJobsAndTask' permission.
     * @param {Number} jobCodeId The ID of the job code you want to delete
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesDeleteJobCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    jobCodesDeleteJobCode(jobCodeId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'jobCodeId' is set
      if (jobCodeId === undefined || jobCodeId === null) {
        throw new Error("Missing the required parameter 'jobCodeId' when calling jobCodesDeleteJobCode");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling jobCodesDeleteJobCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'JobCodeId': jobCodeId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/JobCodes/DeleteJobCode', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCodesGetJobCodeById operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesGetJobCodeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseJobCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular job code by job code id.    Requires 'SubmitTimesheets' or 'ManageJobsAndTasks' permissions.
     * @param {Number} jobCodeId The ID of the JobCode you want to get
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesGetJobCodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseJobCode}
     */
    jobCodesGetJobCodeById(jobCodeId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'jobCodeId' is set
      if (jobCodeId === undefined || jobCodeId === null) {
        throw new Error("Missing the required parameter 'jobCodeId' when calling jobCodesGetJobCodeById");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling jobCodesGetJobCodeById");
      }

      let pathParams = {
      };
      let queryParams = {
        'JobCodeId': jobCodeId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseJobCode;
      return this.apiClient.callApi(
        '/JobCodes/GetJobCodeById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCodesGetJobCodes operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesGetJobCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListJobCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get job codes for your organisation.    Requires 'SubmitTimesheets' or 'ManageJobsAndTasks' permissions.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesGetJobCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListJobCode}
     */
    jobCodesGetJobCodes(xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling jobCodesGetJobCodes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListJobCode;
      return this.apiClient.callApi(
        '/JobCodes/GetJobCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCodesUpdateJobCode operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesUpdateJobCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a job code.    Requires the 'ManageJobsAndTask' permission.
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/UpdateJobCodeRequest} request A Update JobCode Request object containing updated fields.  Make sure to specify the JobCode Id in the request object so that ChronoSheets knows which JobCode to update
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/JobCodesApi~jobCodesUpdateJobCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseBoolean}
     */
    jobCodesUpdateJobCode(xChronosheetsAuth, request, callback) {
      let postBody = request;
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling jobCodesUpdateJobCode");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling jobCodesUpdateJobCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseBoolean;
      return this.apiClient.callApi(
        '/JobCodes/UpdateJobCode', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
