/**
 * ChronoSheets API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseInsertUserResponse', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseListUserForManagement', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUpdateUserResponse', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUserForManagement', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiInsertUserRequest', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiUpdateUserRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ChronoSheetsClientLibModel/CsApiApiResponseInsertUserResponse'), require('../ChronoSheetsClientLibModel/CsApiApiResponseListUserForManagement'), require('../ChronoSheetsClientLibModel/CsApiApiResponseUpdateUserResponse'), require('../ChronoSheetsClientLibModel/CsApiApiResponseUserForManagement'), require('../ChronoSheetsClientLibModel/CsApiInsertUserRequest'), require('../ChronoSheetsClientLibModel/CsApiUpdateUserRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.UsersApi = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CsApiApiResponseInsertUserResponse, root.ChronoSheetsApi.CsApiApiResponseListUserForManagement, root.ChronoSheetsApi.CsApiApiResponseUpdateUserResponse, root.ChronoSheetsApi.CsApiApiResponseUserForManagement, root.ChronoSheetsApi.CsApiInsertUserRequest, root.ChronoSheetsApi.CsApiUpdateUserRequest);
  }
}(this, function(ApiClient, CsApiApiResponseInsertUserResponse, CsApiApiResponseListUserForManagement, CsApiApiResponseUpdateUserResponse, CsApiApiResponseUserForManagement, CsApiInsertUserRequest, CsApiUpdateUserRequest) {
  'use strict';

  /**
   * Users service.
   * @module ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi
   * @version v1
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi
   * @class
   * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the usersCreateTimesheetUser operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersCreateTimesheetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseInsertUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user in your organisation
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiInsertUserRequest} request 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersCreateTimesheetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseInsertUserResponse}
     */
    this.usersCreateTimesheetUser = function(request, xChronosheetsAuth, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersCreateTimesheetUser");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling usersCreateTimesheetUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CsApiApiResponseInsertUserResponse;

      return this.apiClient.callApi(
        '/api/Users/CreateTimesheetUser', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetTimesheetUser operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersGetTimesheetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUserForManagement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular user in your organisation
     * @param {Number} userId 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersGetTimesheetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUserForManagement}
     */
    this.usersGetTimesheetUser = function(userId, xChronosheetsAuth, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGetTimesheetUser");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling usersGetTimesheetUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'UserId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CsApiApiResponseUserForManagement;

      return this.apiClient.callApi(
        '/api/Users/GetTimesheetUser', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetTimesheetUsers operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersGetTimesheetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseListUserForManagement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users for your organisation
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersGetTimesheetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseListUserForManagement}
     */
    this.usersGetTimesheetUsers = function(xChronosheetsAuth, callback) {
      var postBody = null;

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling usersGetTimesheetUsers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CsApiApiResponseListUserForManagement;

      return this.apiClient.callApi(
        '/api/Users/GetTimesheetUsers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateTimesheetUser operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersUpdateTimesheetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUpdateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiUpdateUserRequest} request 
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/UsersApi~usersUpdateTimesheetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/CsApiApiResponseUpdateUserResponse}
     */
    this.usersUpdateTimesheetUser = function(request, xChronosheetsAuth, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersUpdateTimesheetUser");
      }

      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling usersUpdateTimesheetUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      var returnType = CsApiApiResponseUpdateUserResponse;

      return this.apiClient.callApi(
        '/api/Users/UpdateTimesheetUser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
