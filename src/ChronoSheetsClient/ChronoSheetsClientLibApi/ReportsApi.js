/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponseCombinedReportsData from '../ChronoSheetsClientLibModel/ApiResponseCombinedReportsData';
import ApiResponseForPaginatedListOrgReportTimesheetFileAttachment from '../ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTimesheetFileAttachment';
import ApiResponseForPaginatedListOrgReportTranscript from '../ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTranscript';
import ApiResponseForPaginatedListOrgReportTrip from '../ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTrip';
import ApiResponseForPaginatedListRawReportItem from '../ChronoSheetsClientLibModel/ApiResponseForPaginatedListRawReportItem';
import ApiResponseListFleetSummaryReportItem from '../ChronoSheetsClientLibModel/ApiResponseListFleetSummaryReportItem';
import ApiResponseListJobSeriesReportItem from '../ChronoSheetsClientLibModel/ApiResponseListJobSeriesReportItem';
import ApiResponseListProjectCostingReportItem from '../ChronoSheetsClientLibModel/ApiResponseListProjectCostingReportItem';
import ApiResponseTrip from '../ChronoSheetsClientLibModel/ApiResponseTrip';

/**
* Reports service.
* @module ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi
* @version 1.0.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi
    * @class
    * @param {module:ChronoSheetsClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ChronoSheetsClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportsGetAllChartsDataAdmin operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetAllChartsDataAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseCombinedReportsData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/String} opts.forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the 'NotForced' option.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetAllChartsDataAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseCombinedReportsData}
     */
    reportsGetAllChartsDataAdmin(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataAdmin");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataAdmin");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'UserIds': opts['userIds'],
        'ForceOnlyThisChart': opts['forceOnlyThisChart']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseCombinedReportsData;
      return this.apiClient.callApi(
        '/Reports/GetAllChartsDataAdmin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetAllChartsDataUser operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetAllChartsDataUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseCombinedReportsData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetAllChartsDataUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseCombinedReportsData}
     */
    reportsGetAllChartsDataUser(startDate, endDate, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetAllChartsDataUser");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetAllChartsDataUser");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetAllChartsDataUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseCombinedReportsData;
      return this.apiClient.callApi(
        '/Reports/GetAllChartsDataUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetFleetSummaryAdmin operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetFleetSummaryAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListFleetSummaryReportItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetFleetSummaryAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListFleetSummaryReportItem}
     */
    reportsGetFleetSummaryAdmin(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetFleetSummaryAdmin");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetFleetSummaryAdmin");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetFleetSummaryAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'UserIds': opts['userIds']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListFleetSummaryReportItem;
      return this.apiClient.callApi(
        '/Reports/GetFleetSummaryAdmin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetOrgTripById operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrgTripByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseTrip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     * @param {Number} tripId The ID of the Trip you want to get
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrgTripByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseTrip}
     */
    reportsGetOrgTripById(tripId, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'tripId' is set
      if (tripId === undefined || tripId === null) {
        throw new Error("Missing the required parameter 'tripId' when calling reportsGetOrgTripById");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrgTripById");
      }

      let pathParams = {
      };
      let queryParams = {
        'TripId': tripId
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseTrip;
      return this.apiClient.callApi(
        '/Reports/GetOrgTripById', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetOrganisationTimesheetFileAttachments operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTimesheetFileAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTimesheetFileAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Skip this many items
     * @param {Number} opts.take Take this many items
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTimesheetFileAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTimesheetFileAttachment}
     */
    reportsGetOrganisationTimesheetFileAttachments(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetOrganisationTimesheetFileAttachments");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetOrganisationTimesheetFileAttachments");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTimesheetFileAttachments");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'Skip': opts['skip'],
        'Take': opts['take'],
        'UserIds': opts['userIds']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseForPaginatedListOrgReportTimesheetFileAttachment;
      return this.apiClient.callApi(
        '/Reports/GetOrganisationTimesheetFileAttachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetOrganisationTranscripts operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTranscriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTranscript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Skip this many items
     * @param {Number} opts.take Take this many items
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {String} opts.keywords Search the transcripts by keyword(s)
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTranscriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTranscript}
     */
    reportsGetOrganisationTranscripts(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetOrganisationTranscripts");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetOrganisationTranscripts");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTranscripts");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'Skip': opts['skip'],
        'Take': opts['take'],
        'UserIds': opts['userIds'],
        'Keywords': opts['keywords']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseForPaginatedListOrgReportTranscript;
      return this.apiClient.callApi(
        '/Reports/GetOrganisationTranscripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetOrganisationTrips operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTripsCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTrip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Skip this many items
     * @param {Number} opts.take Take this many items
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetOrganisationTripsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListOrgReportTrip}
     */
    reportsGetOrganisationTrips(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetOrganisationTrips");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetOrganisationTrips");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetOrganisationTrips");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'Skip': opts['skip'],
        'Take': opts['take'],
        'UserIds': opts['userIds']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseForPaginatedListOrgReportTrip;
      return this.apiClient.callApi(
        '/Reports/GetOrganisationTrips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetRawDataAdmin operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetRawDataAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListRawReportItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/String} opts.sort Decide which column to sort on
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/String} opts.order Decide which direction to sort the column
     * @param {Number} opts.skip Skip this many rows
     * @param {Number} opts.take Take this many rows
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsGetRawDataAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseForPaginatedListRawReportItem}
     */
    reportsGetRawDataAdmin(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsGetRawDataAdmin");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsGetRawDataAdmin");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsGetRawDataAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'UserIds': opts['userIds'],
        'Sort': opts['sort'],
        'Order': opts['order'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseForPaginatedListRawReportItem;
      return this.apiClient.callApi(
        '/Reports/GetRawDataAdmin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsProjectCostingsAdmin operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsProjectCostingsAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListProjectCostingReportItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsProjectCostingsAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListProjectCostingReportItem}
     */
    reportsProjectCostingsAdmin(startDate, endDate, xChronosheetsAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsProjectCostingsAdmin");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsProjectCostingsAdmin");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsProjectCostingsAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'UserIds': opts['userIds']
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListProjectCostingReportItem;
      return this.apiClient.callApi(
        '/Reports/ProjectCostingsAdmin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsUserJobsOverTime operation.
     * @callback module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsUserJobsOverTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListJobSeriesReportItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     * @param {Date} startDate The start date for the date range.  Report data in the response is after this date
     * @param {Date} endDate The end date for the date range.  Report data in the response is before this date
     * @param {String} xChronosheetsAuth The ChronoSheets Auth Token
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibApi/ReportsApi~reportsUserJobsOverTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ChronoSheetsClient/ChronoSheetsClientLibModel/ApiResponseListJobSeriesReportItem}
     */
    reportsUserJobsOverTime(startDate, endDate, xChronosheetsAuth, callback) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsUserJobsOverTime");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsUserJobsOverTime");
      }
      // verify the required parameter 'xChronosheetsAuth' is set
      if (xChronosheetsAuth === undefined || xChronosheetsAuth === null) {
        throw new Error("Missing the required parameter 'xChronosheetsAuth' when calling reportsUserJobsOverTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate
      };
      let headerParams = {
        'x-chronosheets-auth': xChronosheetsAuth
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'];
      let returnType = ApiResponseListJobSeriesReportItem;
      return this.apiClient.callApi(
        '/Reports/UserJobsOverTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
