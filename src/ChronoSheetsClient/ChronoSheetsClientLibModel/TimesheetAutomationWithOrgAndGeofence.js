/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicCoordinate from './BasicCoordinate';

/**
 * The TimesheetAutomationWithOrgAndGeofence model module.
 * @module ChronoSheetsClient/ChronoSheetsClientLibModel/TimesheetAutomationWithOrgAndGeofence
 * @version 1.0.0
 */
class TimesheetAutomationWithOrgAndGeofence {
    /**
     * Constructs a new <code>TimesheetAutomationWithOrgAndGeofence</code>.
     * @alias module:ChronoSheetsClient/ChronoSheetsClientLibModel/TimesheetAutomationWithOrgAndGeofence
     */
    constructor() { 
        
        TimesheetAutomationWithOrgAndGeofence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimesheetAutomationWithOrgAndGeofence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/TimesheetAutomationWithOrgAndGeofence} obj Optional instance to populate.
     * @return {module:ChronoSheetsClient/ChronoSheetsClientLibModel/TimesheetAutomationWithOrgAndGeofence} The populated <code>TimesheetAutomationWithOrgAndGeofence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimesheetAutomationWithOrgAndGeofence();

            if (data.hasOwnProperty('OrgId')) {
                obj['OrgId'] = ApiClient.convertToType(data['OrgId'], 'Number');
            }
            if (data.hasOwnProperty('GeofenceName')) {
                obj['GeofenceName'] = ApiClient.convertToType(data['GeofenceName'], 'String');
            }
            if (data.hasOwnProperty('Coordinates')) {
                obj['Coordinates'] = ApiClient.convertToType(data['Coordinates'], [BasicCoordinate]);
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'Number');
            }
            if (data.hasOwnProperty('UserName')) {
                obj['UserName'] = ApiClient.convertToType(data['UserName'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('AutomationId')) {
                obj['AutomationId'] = ApiClient.convertToType(data['AutomationId'], 'Number');
            }
            if (data.hasOwnProperty('AutomationActionType')) {
                obj['AutomationActionType'] = ApiClient.convertToType(data['AutomationActionType'], 'String');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('Latitude')) {
                obj['Latitude'] = ApiClient.convertToType(data['Latitude'], 'Number');
            }
            if (data.hasOwnProperty('Longitude')) {
                obj['Longitude'] = ApiClient.convertToType(data['Longitude'], 'Number');
            }
            if (data.hasOwnProperty('IsProcessed')) {
                obj['IsProcessed'] = ApiClient.convertToType(data['IsProcessed'], 'Boolean');
            }
            if (data.hasOwnProperty('Expires')) {
                obj['Expires'] = ApiClient.convertToType(data['Expires'], 'Date');
            }
            if (data.hasOwnProperty('ClientDateTime')) {
                obj['ClientDateTime'] = ApiClient.convertToType(data['ClientDateTime'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} OrgId
 */
TimesheetAutomationWithOrgAndGeofence.prototype['OrgId'] = undefined;

/**
 * @member {String} GeofenceName
 */
TimesheetAutomationWithOrgAndGeofence.prototype['GeofenceName'] = undefined;

/**
 * @member {Array.<module:ChronoSheetsClient/ChronoSheetsClientLibModel/BasicCoordinate>} Coordinates
 */
TimesheetAutomationWithOrgAndGeofence.prototype['Coordinates'] = undefined;

/**
 * @member {Number} UserId
 */
TimesheetAutomationWithOrgAndGeofence.prototype['UserId'] = undefined;

/**
 * @member {String} UserName
 */
TimesheetAutomationWithOrgAndGeofence.prototype['UserName'] = undefined;

/**
 * @member {String} FirstName
 */
TimesheetAutomationWithOrgAndGeofence.prototype['FirstName'] = undefined;

/**
 * @member {String} LastName
 */
TimesheetAutomationWithOrgAndGeofence.prototype['LastName'] = undefined;

/**
 * @member {Number} AutomationId
 */
TimesheetAutomationWithOrgAndGeofence.prototype['AutomationId'] = undefined;

/**
 * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/TimesheetAutomationWithOrgAndGeofence.AutomationActionTypeEnum} AutomationActionType
 */
TimesheetAutomationWithOrgAndGeofence.prototype['AutomationActionType'] = undefined;

/**
 * @member {Date} Created
 */
TimesheetAutomationWithOrgAndGeofence.prototype['Created'] = undefined;

/**
 * @member {Number} Latitude
 */
TimesheetAutomationWithOrgAndGeofence.prototype['Latitude'] = undefined;

/**
 * @member {Number} Longitude
 */
TimesheetAutomationWithOrgAndGeofence.prototype['Longitude'] = undefined;

/**
 * @member {Boolean} IsProcessed
 */
TimesheetAutomationWithOrgAndGeofence.prototype['IsProcessed'] = undefined;

/**
 * @member {Date} Expires
 */
TimesheetAutomationWithOrgAndGeofence.prototype['Expires'] = undefined;

/**
 * @member {Date} ClientDateTime
 */
TimesheetAutomationWithOrgAndGeofence.prototype['ClientDateTime'] = undefined;





/**
 * Allowed values for the <code>AutomationActionType</code> property.
 * @enum {String}
 * @readonly
 */
TimesheetAutomationWithOrgAndGeofence['AutomationActionTypeEnum'] = {

    /**
     * value: "EnterGeofence"
     * @const
     */
    "EnterGeofence": "EnterGeofence",

    /**
     * value: "ExitGeofence"
     * @const
     */
    "ExitGeofence": "ExitGeofence",

    /**
     * value: "TapOnNfc"
     * @const
     */
    "TapOnNfc": "TapOnNfc"
};



export default TimesheetAutomationWithOrgAndGeofence;

