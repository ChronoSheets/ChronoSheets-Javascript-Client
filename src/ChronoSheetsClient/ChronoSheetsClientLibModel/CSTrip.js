/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSTripCoordinate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CSTripCoordinate'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.CSTrip = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CSTripCoordinate);
  }
}(this, function(ApiClient, CSTripCoordinate) {
  'use strict';

  /**
   * The CSTrip model module.
   * @module ChronoSheetsClient/ChronoSheetsClientLibModel/CSTrip
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CSTrip</code>.
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSTrip
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>CSTrip</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSTrip} obj Optional instance to populate.
   * @return {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSTrip} The populated <code>CSTrip</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('TripId'))
        obj.tripId = ApiClient.convertToType(data['TripId'], 'Number');
      if (data.hasOwnProperty('TimesheetId'))
        obj.timesheetId = ApiClient.convertToType(data['TimesheetId'], 'Number');
      if (data.hasOwnProperty('VehicleId'))
        obj.vehicleId = ApiClient.convertToType(data['VehicleId'], 'Number');
      if (data.hasOwnProperty('UserId'))
        obj.userId = ApiClient.convertToType(data['UserId'], 'Number');
      if (data.hasOwnProperty('OrgId'))
        obj.orgId = ApiClient.convertToType(data['OrgId'], 'Number');
      if (data.hasOwnProperty('MobilePlatform'))
        obj.mobilePlatform = ApiClient.convertToType(data['MobilePlatform'], 'String');
      if (data.hasOwnProperty('StartDate'))
        obj.startDate = ApiClient.convertToType(data['StartDate'], 'Date');
      if (data.hasOwnProperty('EndDate'))
        obj.endDate = ApiClient.convertToType(data['EndDate'], 'Date');
      if (data.hasOwnProperty('VehicleName'))
        obj.vehicleName = ApiClient.convertToType(data['VehicleName'], 'String');
      if (data.hasOwnProperty('VehicleMake'))
        obj.vehicleMake = ApiClient.convertToType(data['VehicleMake'], 'String');
      if (data.hasOwnProperty('VehicleModel'))
        obj.vehicleModel = ApiClient.convertToType(data['VehicleModel'], 'String');
      if (data.hasOwnProperty('VehicleYear'))
        obj.vehicleYear = ApiClient.convertToType(data['VehicleYear'], 'String');
      if (data.hasOwnProperty('CostPerKilometer'))
        obj.costPerKilometer = ApiClient.convertToType(data['CostPerKilometer'], 'Number');
      if (data.hasOwnProperty('TripTotalCost'))
        obj.tripTotalCost = ApiClient.convertToType(data['TripTotalCost'], 'Number');
      if (data.hasOwnProperty('TotalTripDistanceMeters'))
        obj.totalTripDistanceMeters = ApiClient.convertToType(data['TotalTripDistanceMeters'], 'Number');
      if (data.hasOwnProperty('StartAddress'))
        obj.startAddress = ApiClient.convertToType(data['StartAddress'], 'String');
      if (data.hasOwnProperty('EndAddress'))
        obj.endAddress = ApiClient.convertToType(data['EndAddress'], 'String');
      if (data.hasOwnProperty('PathCoordinates'))
        obj.pathCoordinates = ApiClient.convertToType(data['PathCoordinates'], [CSTripCoordinate]);
      if (data.hasOwnProperty('CacheExpiryDate'))
        obj.cacheExpiryDate = ApiClient.convertToType(data['CacheExpiryDate'], 'Date');
    }
    return obj;
  }

  /**
   * @member {Number} tripId
   */
  exports.prototype.tripId = undefined;

  /**
   * @member {Number} timesheetId
   */
  exports.prototype.timesheetId = undefined;

  /**
   * @member {Number} vehicleId
   */
  exports.prototype.vehicleId = undefined;

  /**
   * @member {Number} userId
   */
  exports.prototype.userId = undefined;

  /**
   * @member {Number} orgId
   */
  exports.prototype.orgId = undefined;

  /**
   * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSTrip.MobilePlatformEnum} mobilePlatform
   */
  exports.prototype.mobilePlatform = undefined;

  /**
   * @member {Date} startDate
   */
  exports.prototype.startDate = undefined;

  /**
   * @member {Date} endDate
   */
  exports.prototype.endDate = undefined;

  /**
   * @member {String} vehicleName
   */
  exports.prototype.vehicleName = undefined;

  /**
   * @member {String} vehicleMake
   */
  exports.prototype.vehicleMake = undefined;

  /**
   * @member {String} vehicleModel
   */
  exports.prototype.vehicleModel = undefined;

  /**
   * @member {String} vehicleYear
   */
  exports.prototype.vehicleYear = undefined;

  /**
   * @member {Number} costPerKilometer
   */
  exports.prototype.costPerKilometer = undefined;

  /**
   * @member {Number} tripTotalCost
   */
  exports.prototype.tripTotalCost = undefined;

  /**
   * @member {Number} totalTripDistanceMeters
   */
  exports.prototype.totalTripDistanceMeters = undefined;

  /**
   * @member {String} startAddress
   */
  exports.prototype.startAddress = undefined;

  /**
   * @member {String} endAddress
   */
  exports.prototype.endAddress = undefined;

  /**
   * @member {Array.<module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSTripCoordinate>} pathCoordinates
   */
  exports.prototype.pathCoordinates = undefined;

  /**
   * @member {Date} cacheExpiryDate
   */
  exports.prototype.cacheExpiryDate = undefined;


  /**
   * Allowed values for the <code>mobilePlatform</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MobilePlatformEnum = {
    /**
     * value: "Unknown"
     * @const
     */
    unknown: "Unknown",

    /**
     * value: "iOS"
     * @const
     */
    iOS: "iOS",

    /**
     * value: "Android"
     * @const
     */
    android: "Android"
  };

  return exports;

}));
