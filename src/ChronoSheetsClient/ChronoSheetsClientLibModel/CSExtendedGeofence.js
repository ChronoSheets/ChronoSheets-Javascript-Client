/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSBasicCoordinate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CSBasicCoordinate'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.CSExtendedGeofence = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CSBasicCoordinate);
  }
}(this, function(ApiClient, CSBasicCoordinate) {
  'use strict';

  /**
   * The CSExtendedGeofence model module.
   * @module ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CSExtendedGeofence</code>.
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>CSExtendedGeofence</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence} obj Optional instance to populate.
   * @return {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence} The populated <code>CSExtendedGeofence</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('JobCode'))
        obj.jobCode = ApiClient.convertToType(data['JobCode'], 'String');
      if (data.hasOwnProperty('TaskName'))
        obj.taskName = ApiClient.convertToType(data['TaskName'], 'String');
      if (data.hasOwnProperty('CreatedBy'))
        obj.createdBy = ApiClient.convertToType(data['CreatedBy'], 'String');
      if (data.hasOwnProperty('UpdatedBy'))
        obj.updatedBy = ApiClient.convertToType(data['UpdatedBy'], 'String');
      if (data.hasOwnProperty('AlertOrganisation'))
        obj.alertOrganisation = ApiClient.convertToType(data['AlertOrganisation'], 'String');
      if (data.hasOwnProperty('GeoFencingId'))
        obj.geoFencingId = ApiClient.convertToType(data['GeoFencingId'], 'Number');
      if (data.hasOwnProperty('OrgId'))
        obj.orgId = ApiClient.convertToType(data['OrgId'], 'Number');
      if (data.hasOwnProperty('CreatedByUserId'))
        obj.createdByUserId = ApiClient.convertToType(data['CreatedByUserId'], 'Number');
      if (data.hasOwnProperty('LastUpdatedByUserId'))
        obj.lastUpdatedByUserId = ApiClient.convertToType(data['LastUpdatedByUserId'], 'Number');
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('LocationName'))
        obj.locationName = ApiClient.convertToType(data['LocationName'], 'String');
      if (data.hasOwnProperty('Coordinates'))
        obj.coordinates = ApiClient.convertToType(data['Coordinates'], [CSBasicCoordinate]);
      if (data.hasOwnProperty('CreatedAt'))
        obj.createdAt = ApiClient.convertToType(data['CreatedAt'], 'Date');
      if (data.hasOwnProperty('UpdatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['UpdatedAt'], 'Date');
      if (data.hasOwnProperty('TriggerJobCodeId'))
        obj.triggerJobCodeId = ApiClient.convertToType(data['TriggerJobCodeId'], 'Number');
      if (data.hasOwnProperty('TriggerTaskId'))
        obj.triggerTaskId = ApiClient.convertToType(data['TriggerTaskId'], 'Number');
      if (data.hasOwnProperty('TriggerSettings'))
        obj.triggerSettings = ApiClient.convertToType(data['TriggerSettings'], 'String');
      if (data.hasOwnProperty('AlertToOrgGroupId'))
        obj.alertToOrgGroupId = ApiClient.convertToType(data['AlertToOrgGroupId'], 'Number');
      if (data.hasOwnProperty('AlertSettings'))
        obj.alertSettings = ApiClient.convertToType(data['AlertSettings'], 'String');
      if (data.hasOwnProperty('StartTimeHour'))
        obj.startTimeHour = ApiClient.convertToType(data['StartTimeHour'], 'Number');
      if (data.hasOwnProperty('StartTimeMinute'))
        obj.startTimeMinute = ApiClient.convertToType(data['StartTimeMinute'], 'Number');
      if (data.hasOwnProperty('EndTimeHour'))
        obj.endTimeHour = ApiClient.convertToType(data['EndTimeHour'], 'Number');
      if (data.hasOwnProperty('EndTimeMinute'))
        obj.endTimeMinute = ApiClient.convertToType(data['EndTimeMinute'], 'Number');
    }
    return obj;
  }

  /**
   * @member {String} jobCode
   */
  exports.prototype.jobCode = undefined;

  /**
   * @member {String} taskName
   */
  exports.prototype.taskName = undefined;

  /**
   * @member {String} createdBy
   */
  exports.prototype.createdBy = undefined;

  /**
   * @member {String} updatedBy
   */
  exports.prototype.updatedBy = undefined;

  /**
   * @member {String} alertOrganisation
   */
  exports.prototype.alertOrganisation = undefined;

  /**
   * @member {Number} geoFencingId
   */
  exports.prototype.geoFencingId = undefined;

  /**
   * @member {Number} orgId
   */
  exports.prototype.orgId = undefined;

  /**
   * @member {Number} createdByUserId
   */
  exports.prototype.createdByUserId = undefined;

  /**
   * @member {Number} lastUpdatedByUserId
   */
  exports.prototype.lastUpdatedByUserId = undefined;

  /**
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {String} locationName
   */
  exports.prototype.locationName = undefined;

  /**
   * @member {Array.<module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSBasicCoordinate>} coordinates
   */
  exports.prototype.coordinates = undefined;

  /**
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * @member {Number} triggerJobCodeId
   */
  exports.prototype.triggerJobCodeId = undefined;

  /**
   * @member {Number} triggerTaskId
   */
  exports.prototype.triggerTaskId = undefined;

  /**
   * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence.TriggerSettingsEnum} triggerSettings
   */
  exports.prototype.triggerSettings = undefined;

  /**
   * @member {Number} alertToOrgGroupId
   */
  exports.prototype.alertToOrgGroupId = undefined;

  /**
   * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSExtendedGeofence.AlertSettingsEnum} alertSettings
   */
  exports.prototype.alertSettings = undefined;

  /**
   * @member {Number} startTimeHour
   */
  exports.prototype.startTimeHour = undefined;

  /**
   * @member {Number} startTimeMinute
   */
  exports.prototype.startTimeMinute = undefined;

  /**
   * @member {Number} endTimeHour
   */
  exports.prototype.endTimeHour = undefined;

  /**
   * @member {Number} endTimeMinute
   */
  exports.prototype.endTimeMinute = undefined;


  /**
   * Allowed values for the <code>triggerSettings</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TriggerSettingsEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "StartTimesheetWhenEntering"
     * @const
     */
    startTimesheetWhenEntering: "StartTimesheetWhenEntering",

    /**
     * value: "StopTimesheetWhenEntering"
     * @const
     */
    stopTimesheetWhenEntering: "StopTimesheetWhenEntering",

    /**
     * value: "StartOnEnterStopOnLeave"
     * @const
     */
    startOnEnterStopOnLeave: "StartOnEnterStopOnLeave"
  };


  /**
   * Allowed values for the <code>alertSettings</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AlertSettingsEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "SendWhenEntering"
     * @const
     */
    sendWhenEntering: "SendWhenEntering",

    /**
     * value: "SendWhenExiting"
     * @const
     */
    sendWhenExiting: "SendWhenExiting",

    /**
     * value: "SendWhenEnteringOrExiting"
     * @const
     */
    sendWhenEnteringOrExiting: "SendWhenEnteringOrExiting"
  };

  return exports;

}));
