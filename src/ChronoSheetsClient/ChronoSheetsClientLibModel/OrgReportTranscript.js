/**
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrgReportTranscript model module.
 * @module ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript
 * @version 1.0.0
 */
class OrgReportTranscript {
    /**
     * Constructs a new <code>OrgReportTranscript</code>.
     * @alias module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript
     */
    constructor() { 
        
        OrgReportTranscript.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrgReportTranscript</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript} obj Optional instance to populate.
     * @return {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript} The populated <code>OrgReportTranscript</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgReportTranscript();

            if (data.hasOwnProperty('FinishedJob')) {
                obj['FinishedJob'] = ApiClient.convertToType(data['FinishedJob'], 'Boolean');
            }
            if (data.hasOwnProperty('CompletedProcessing')) {
                obj['CompletedProcessing'] = ApiClient.convertToType(data['CompletedProcessing'], 'Date');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('StartedProcessing')) {
                obj['StartedProcessing'] = ApiClient.convertToType(data['StartedProcessing'], 'Date');
            }
            if (data.hasOwnProperty('TranscriptionId')) {
                obj['TranscriptionId'] = ApiClient.convertToType(data['TranscriptionId'], 'Number');
            }
            if (data.hasOwnProperty('JobName')) {
                obj['JobName'] = ApiClient.convertToType(data['JobName'], 'String');
            }
            if (data.hasOwnProperty('Contents')) {
                obj['Contents'] = ApiClient.convertToType(data['Contents'], 'String');
            }
            if (data.hasOwnProperty('MediaType')) {
                obj['MediaType'] = ApiClient.convertToType(data['MediaType'], 'String');
            }
            if (data.hasOwnProperty('TranscriptionStatus')) {
                obj['TranscriptionStatus'] = ApiClient.convertToType(data['TranscriptionStatus'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('TimesheetId')) {
                obj['TimesheetId'] = ApiClient.convertToType(data['TimesheetId'], 'Number');
            }
            if (data.hasOwnProperty('DocumentS3SignedUrl')) {
                obj['DocumentS3SignedUrl'] = ApiClient.convertToType(data['DocumentS3SignedUrl'], 'String');
            }
            if (data.hasOwnProperty('ImageLargeS3SignedUrl')) {
                obj['ImageLargeS3SignedUrl'] = ApiClient.convertToType(data['ImageLargeS3SignedUrl'], 'String');
            }
            if (data.hasOwnProperty('ImageMediumS3SignedUrl')) {
                obj['ImageMediumS3SignedUrl'] = ApiClient.convertToType(data['ImageMediumS3SignedUrl'], 'String');
            }
            if (data.hasOwnProperty('ImageSmallS3SignedUrl')) {
                obj['ImageSmallS3SignedUrl'] = ApiClient.convertToType(data['ImageSmallS3SignedUrl'], 'String');
            }
            if (data.hasOwnProperty('TimesheetStart')) {
                obj['TimesheetStart'] = ApiClient.convertToType(data['TimesheetStart'], 'Date');
            }
            if (data.hasOwnProperty('TimesheetEnd')) {
                obj['TimesheetEnd'] = ApiClient.convertToType(data['TimesheetEnd'], 'Date');
            }
            if (data.hasOwnProperty('FileAttachmentId')) {
                obj['FileAttachmentId'] = ApiClient.convertToType(data['FileAttachmentId'], 'Number');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'Number');
            }
            if (data.hasOwnProperty('OrgId')) {
                obj['OrgId'] = ApiClient.convertToType(data['OrgId'], 'Number');
            }
            if (data.hasOwnProperty('MobilePlatform')) {
                obj['MobilePlatform'] = ApiClient.convertToType(data['MobilePlatform'], 'String');
            }
            if (data.hasOwnProperty('AttachmentType')) {
                obj['AttachmentType'] = ApiClient.convertToType(data['AttachmentType'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('NonImageFilePath')) {
                obj['NonImageFilePath'] = ApiClient.convertToType(data['NonImageFilePath'], 'String');
            }
            if (data.hasOwnProperty('ImageLargeFilePath')) {
                obj['ImageLargeFilePath'] = ApiClient.convertToType(data['ImageLargeFilePath'], 'String');
            }
            if (data.hasOwnProperty('ImageMediumFilePath')) {
                obj['ImageMediumFilePath'] = ApiClient.convertToType(data['ImageMediumFilePath'], 'String');
            }
            if (data.hasOwnProperty('ImageSmallFilePath')) {
                obj['ImageSmallFilePath'] = ApiClient.convertToType(data['ImageSmallFilePath'], 'String');
            }
            if (data.hasOwnProperty('OriginalFileName')) {
                obj['OriginalFileName'] = ApiClient.convertToType(data['OriginalFileName'], 'String');
            }
            if (data.hasOwnProperty('Latitude')) {
                obj['Latitude'] = ApiClient.convertToType(data['Latitude'], 'Number');
            }
            if (data.hasOwnProperty('Longitude')) {
                obj['Longitude'] = ApiClient.convertToType(data['Longitude'], 'Number');
            }
            if (data.hasOwnProperty('DateUploaded')) {
                obj['DateUploaded'] = ApiClient.convertToType(data['DateUploaded'], 'Date');
            }
            if (data.hasOwnProperty('DateImageCaptured')) {
                obj['DateImageCaptured'] = ApiClient.convertToType(data['DateImageCaptured'], 'Date');
            }
            if (data.hasOwnProperty('StorageAllocationBytes')) {
                obj['StorageAllocationBytes'] = ApiClient.convertToType(data['StorageAllocationBytes'], 'Number');
            }
            if (data.hasOwnProperty('AudioDurationSeconds')) {
                obj['AudioDurationSeconds'] = ApiClient.convertToType(data['AudioDurationSeconds'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} FinishedJob
 */
OrgReportTranscript.prototype['FinishedJob'] = undefined;

/**
 * @member {Date} CompletedProcessing
 */
OrgReportTranscript.prototype['CompletedProcessing'] = undefined;

/**
 * @member {Date} Created
 */
OrgReportTranscript.prototype['Created'] = undefined;

/**
 * @member {Date} StartedProcessing
 */
OrgReportTranscript.prototype['StartedProcessing'] = undefined;

/**
 * @member {Number} TranscriptionId
 */
OrgReportTranscript.prototype['TranscriptionId'] = undefined;

/**
 * @member {String} JobName
 */
OrgReportTranscript.prototype['JobName'] = undefined;

/**
 * @member {String} Contents
 */
OrgReportTranscript.prototype['Contents'] = undefined;

/**
 * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript.MediaTypeEnum} MediaType
 */
OrgReportTranscript.prototype['MediaType'] = undefined;

/**
 * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript.TranscriptionStatusEnum} TranscriptionStatus
 */
OrgReportTranscript.prototype['TranscriptionStatus'] = undefined;

/**
 * @member {String} Username
 */
OrgReportTranscript.prototype['Username'] = undefined;

/**
 * @member {String} EmailAddress
 */
OrgReportTranscript.prototype['EmailAddress'] = undefined;

/**
 * @member {String} FirstName
 */
OrgReportTranscript.prototype['FirstName'] = undefined;

/**
 * @member {String} LastName
 */
OrgReportTranscript.prototype['LastName'] = undefined;

/**
 * @member {Number} TimesheetId
 */
OrgReportTranscript.prototype['TimesheetId'] = undefined;

/**
 * @member {String} DocumentS3SignedUrl
 */
OrgReportTranscript.prototype['DocumentS3SignedUrl'] = undefined;

/**
 * @member {String} ImageLargeS3SignedUrl
 */
OrgReportTranscript.prototype['ImageLargeS3SignedUrl'] = undefined;

/**
 * @member {String} ImageMediumS3SignedUrl
 */
OrgReportTranscript.prototype['ImageMediumS3SignedUrl'] = undefined;

/**
 * @member {String} ImageSmallS3SignedUrl
 */
OrgReportTranscript.prototype['ImageSmallS3SignedUrl'] = undefined;

/**
 * @member {Date} TimesheetStart
 */
OrgReportTranscript.prototype['TimesheetStart'] = undefined;

/**
 * @member {Date} TimesheetEnd
 */
OrgReportTranscript.prototype['TimesheetEnd'] = undefined;

/**
 * @member {Number} FileAttachmentId
 */
OrgReportTranscript.prototype['FileAttachmentId'] = undefined;

/**
 * @member {Number} UserId
 */
OrgReportTranscript.prototype['UserId'] = undefined;

/**
 * @member {Number} OrgId
 */
OrgReportTranscript.prototype['OrgId'] = undefined;

/**
 * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript.MobilePlatformEnum} MobilePlatform
 */
OrgReportTranscript.prototype['MobilePlatform'] = undefined;

/**
 * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/OrgReportTranscript.AttachmentTypeEnum} AttachmentType
 */
OrgReportTranscript.prototype['AttachmentType'] = undefined;

/**
 * @member {String} Notes
 */
OrgReportTranscript.prototype['Notes'] = undefined;

/**
 * @member {String} NonImageFilePath
 */
OrgReportTranscript.prototype['NonImageFilePath'] = undefined;

/**
 * @member {String} ImageLargeFilePath
 */
OrgReportTranscript.prototype['ImageLargeFilePath'] = undefined;

/**
 * @member {String} ImageMediumFilePath
 */
OrgReportTranscript.prototype['ImageMediumFilePath'] = undefined;

/**
 * @member {String} ImageSmallFilePath
 */
OrgReportTranscript.prototype['ImageSmallFilePath'] = undefined;

/**
 * @member {String} OriginalFileName
 */
OrgReportTranscript.prototype['OriginalFileName'] = undefined;

/**
 * @member {Number} Latitude
 */
OrgReportTranscript.prototype['Latitude'] = undefined;

/**
 * @member {Number} Longitude
 */
OrgReportTranscript.prototype['Longitude'] = undefined;

/**
 * @member {Date} DateUploaded
 */
OrgReportTranscript.prototype['DateUploaded'] = undefined;

/**
 * @member {Date} DateImageCaptured
 */
OrgReportTranscript.prototype['DateImageCaptured'] = undefined;

/**
 * @member {Number} StorageAllocationBytes
 */
OrgReportTranscript.prototype['StorageAllocationBytes'] = undefined;

/**
 * @member {Number} AudioDurationSeconds
 */
OrgReportTranscript.prototype['AudioDurationSeconds'] = undefined;





/**
 * Allowed values for the <code>MediaType</code> property.
 * @enum {String}
 * @readonly
 */
OrgReportTranscript['MediaTypeEnum'] = {

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Mp3"
     * @const
     */
    "Mp3": "Mp3",

    /**
     * value: "Mp4"
     * @const
     */
    "Mp4": "Mp4",

    /**
     * value: "Wav"
     * @const
     */
    "Wav": "Wav",

    /**
     * value: "Flac"
     * @const
     */
    "Flac": "Flac"
};


/**
 * Allowed values for the <code>TranscriptionStatus</code> property.
 * @enum {String}
 * @readonly
 */
OrgReportTranscript['TranscriptionStatusEnum'] = {

    /**
     * value: "Saved"
     * @const
     */
    "Saved": "Saved",

    /**
     * value: "Processing"
     * @const
     */
    "Processing": "Processing",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed",

    /**
     * value: "FailedWithError"
     * @const
     */
    "FailedWithError": "FailedWithError"
};


/**
 * Allowed values for the <code>MobilePlatform</code> property.
 * @enum {String}
 * @readonly
 */
OrgReportTranscript['MobilePlatformEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "iOS"
     * @const
     */
    "iOS": "iOS",

    /**
     * value: "Android"
     * @const
     */
    "Android": "Android"
};


/**
 * Allowed values for the <code>AttachmentType</code> property.
 * @enum {String}
 * @readonly
 */
OrgReportTranscript['AttachmentTypeEnum'] = {

    /**
     * value: "Image"
     * @const
     */
    "Image": "Image",

    /**
     * value: "WordDoc"
     * @const
     */
    "WordDoc": "WordDoc",

    /**
     * value: "Pdf"
     * @const
     */
    "Pdf": "Pdf",

    /**
     * value: "MSSpreadSheet"
     * @const
     */
    "MSSpreadSheet": "MSSpreadSheet",

    /**
     * value: "MSPowerPoint"
     * @const
     */
    "MSPowerPoint": "MSPowerPoint",

    /**
     * value: "RichTextFormat"
     * @const
     */
    "RichTextFormat": "RichTextFormat",

    /**
     * value: "ZipFile"
     * @const
     */
    "ZipFile": "ZipFile",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Audio"
     * @const
     */
    "Audio": "Audio"
};



export default OrgReportTranscript;

