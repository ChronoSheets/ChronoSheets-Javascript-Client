/*
 * ChronoSheets API
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ChronoSheetsClient/ApiClient', 'ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisationPricingPlan'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CSOrganisationPricingPlan'));
  } else {
    // Browser globals (root is window)
    if (!root.ChronoSheetsApi) {
      root.ChronoSheetsApi = {};
    }
    root.ChronoSheetsApi.CSOrganisation = factory(root.ChronoSheetsApi.ApiClient, root.ChronoSheetsApi.CSOrganisationPricingPlan);
  }
}(this, function(ApiClient, CSOrganisationPricingPlan) {
  'use strict';

  /**
   * The CSOrganisation model module.
   * @module ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CSOrganisation</code>.
   * @alias module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>CSOrganisation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation} obj Optional instance to populate.
   * @return {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation} The populated <code>CSOrganisation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.id = ApiClient.convertToType(data['Id'], 'Number');
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('AddressLine01'))
        obj.addressLine01 = ApiClient.convertToType(data['AddressLine01'], 'String');
      if (data.hasOwnProperty('AddressLine02'))
        obj.addressLine02 = ApiClient.convertToType(data['AddressLine02'], 'String');
      if (data.hasOwnProperty('Suburb'))
        obj.suburb = ApiClient.convertToType(data['Suburb'], 'String');
      if (data.hasOwnProperty('State'))
        obj.state = ApiClient.convertToType(data['State'], 'String');
      if (data.hasOwnProperty('Postcode'))
        obj.postcode = ApiClient.convertToType(data['Postcode'], 'String');
      if (data.hasOwnProperty('Country'))
        obj.country = ApiClient.convertToType(data['Country'], 'String');
      if (data.hasOwnProperty('Phone'))
        obj.phone = ApiClient.convertToType(data['Phone'], 'String');
      if (data.hasOwnProperty('EmailAddress'))
        obj.emailAddress = ApiClient.convertToType(data['EmailAddress'], 'String');
      if (data.hasOwnProperty('Timezone'))
        obj.timezone = ApiClient.convertToType(data['Timezone'], 'String');
      if (data.hasOwnProperty('SubscriptionCustomerId'))
        obj.subscriptionCustomerId = ApiClient.convertToType(data['SubscriptionCustomerId'], 'String');
      if (data.hasOwnProperty('SignupToken'))
        obj.signupToken = ApiClient.convertToType(data['SignupToken'], 'String');
      if (data.hasOwnProperty('IsActive'))
        obj.isActive = ApiClient.convertToType(data['IsActive'], 'Boolean');
      if (data.hasOwnProperty('StripeCouponCode'))
        obj.stripeCouponCode = ApiClient.convertToType(data['StripeCouponCode'], 'String');
      if (data.hasOwnProperty('SubscriptionSource'))
        obj.subscriptionSource = ApiClient.convertToType(data['SubscriptionSource'], 'String');
      if (data.hasOwnProperty('SignUpSource'))
        obj.signUpSource = ApiClient.convertToType(data['SignUpSource'], 'String');
      if (data.hasOwnProperty('MobileSignUpCode'))
        obj.mobileSignUpCode = ApiClient.convertToType(data['MobileSignUpCode'], 'String');
      if (data.hasOwnProperty('SubscriptionCycleStart'))
        obj.subscriptionCycleStart = ApiClient.convertToType(data['SubscriptionCycleStart'], 'Date');
      if (data.hasOwnProperty('SubscriptionCycleEnd'))
        obj.subscriptionCycleEnd = ApiClient.convertToType(data['SubscriptionCycleEnd'], 'Date');
      if (data.hasOwnProperty('PricingPlans'))
        obj.pricingPlans = ApiClient.convertToType(data['PricingPlans'], [CSOrganisationPricingPlan]);
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {String} addressLine01
   */
  exports.prototype.addressLine01 = undefined;

  /**
   * @member {String} addressLine02
   */
  exports.prototype.addressLine02 = undefined;

  /**
   * @member {String} suburb
   */
  exports.prototype.suburb = undefined;

  /**
   * @member {String} state
   */
  exports.prototype.state = undefined;

  /**
   * @member {String} postcode
   */
  exports.prototype.postcode = undefined;

  /**
   * @member {String} country
   */
  exports.prototype.country = undefined;

  /**
   * @member {String} phone
   */
  exports.prototype.phone = undefined;

  /**
   * @member {String} emailAddress
   */
  exports.prototype.emailAddress = undefined;

  /**
   * @member {String} timezone
   */
  exports.prototype.timezone = undefined;

  /**
   * @member {String} subscriptionCustomerId
   */
  exports.prototype.subscriptionCustomerId = undefined;

  /**
   * @member {String} signupToken
   */
  exports.prototype.signupToken = undefined;

  /**
   * @member {Boolean} isActive
   */
  exports.prototype.isActive = undefined;

  /**
   * @member {String} stripeCouponCode
   */
  exports.prototype.stripeCouponCode = undefined;

  /**
   * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation.SubscriptionSourceEnum} subscriptionSource
   */
  exports.prototype.subscriptionSource = undefined;

  /**
   * @member {module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisation.SignUpSourceEnum} signUpSource
   */
  exports.prototype.signUpSource = undefined;

  /**
   * @member {String} mobileSignUpCode
   */
  exports.prototype.mobileSignUpCode = undefined;

  /**
   * @member {Date} subscriptionCycleStart
   */
  exports.prototype.subscriptionCycleStart = undefined;

  /**
   * @member {Date} subscriptionCycleEnd
   */
  exports.prototype.subscriptionCycleEnd = undefined;

  /**
   * @member {Array.<module:ChronoSheetsClient/ChronoSheetsClientLibModel/CSOrganisationPricingPlan>} pricingPlans
   */
  exports.prototype.pricingPlans = undefined;


  /**
   * Allowed values for the <code>subscriptionSource</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SubscriptionSourceEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "Stripe"
     * @const
     */
    stripe: "Stripe",

    /**
     * value: "AppleInApp"
     * @const
     */
    appleInApp: "AppleInApp",

    /**
     * value: "GoogleInApp"
     * @const
     */
    googleInApp: "GoogleInApp"
  };


  /**
   * Allowed values for the <code>signUpSource</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SignUpSourceEnum = {
    /**
     * value: "Desktop"
     * @const
     */
    desktop: "Desktop",

    /**
     * value: "MobileiOS"
     * @const
     */
    mobileiOS: "MobileiOS",

    /**
     * value: "MobileAndroid"
     * @const
     */
    mobileAndroid: "MobileAndroid"
  };

  return exports;

}));
